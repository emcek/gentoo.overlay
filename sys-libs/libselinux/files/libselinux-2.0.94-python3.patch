diff -ur libselinux-2.0.94.orig/src/Makefile libselinux-2.0.94/src/Makefile
--- libselinux-2.0.94.orig/src/Makefile	2010-03-24 20:40:05.000000000 +0100
+++ libselinux-2.0.94/src/Makefile	2011-07-05 23:43:08.660001207 +0200
@@ -1,9 +1,11 @@
 # Installation directories.
+PYTHON ?= python
 PREFIX ?= $(DESTDIR)/usr
 LIBDIR ?= $(PREFIX)/lib
 SHLIBDIR ?= $(DESTDIR)/lib
 INCLUDEDIR ?= $(PREFIX)/include
-PYLIBVER ?= $(shell python -c 'import sys;print "python%d.%d" % sys.version_info[0:2]')
+PYLIBVER ?= $(shell $(PYTHON) -c 'import sys;print("python%d.%d" % sys.version_info[0:2])')
+PVH ?= $(shell $(PYTHON) -c 'import sys;print("0x0%d0%d0000" % sys.version_info[0:2])')
 PYINC ?= /usr/include/$(PYLIBVER)
 PYLIB ?= /usr/lib/$(PYLIBVER)
 PYTHONLIBDIR ?= $(LIBDIR)/$(PYLIBVER)
@@ -23,13 +25,13 @@
 SWIGRUBYIF= selinuxswig_ruby.i
 SWIGCOUT= selinuxswig_wrap.c
 SWIGRUBYCOUT= selinuxswig_ruby_wrap.c
-SWIGLOBJ:= $(patsubst %.c,%.lo,$(SWIGCOUT)) 
+SWIGLOBJ:= $(patsubst %.c,$(PYLIBVER)%.lo,$(SWIGCOUT)) 
 SWIGRUBYLOBJ:= $(patsubst %.c,%.lo,$(SWIGRUBYCOUT)) 
-SWIGSO=_selinux.so
+SWIGSO=$(PYLIBVER)_selinux.so
 SWIGFILES=$(SWIGSO) selinux.py selinuxswig_python_exception.i
 SWIGRUBYSO=_rubyselinux.so
 LIBSO=$(TARGET).$(LIBVERSION)
-AUDIT2WHYSO=audit2why.so
+AUDIT2WHYSO=$(PYLIBVER)audit2why.so
 
 ifeq ($(DISABLE_AVC),y)
 	UNUSED_SRCS+=avc.c avc_internal.c avc_sidtab.c mapping.c stringrep.c checkAccess.c
@@ -55,7 +57,7 @@
 TLSFLAGS += -mno-tls-direct-seg-refs
 endif
 
-SWIG = swig -Wall -python -o $(SWIGCOUT) -outdir ./
+SWIG = swig -Wall -python -DPY_VERSION_HEX=$(PVH) -o $(SWIGCOUT) -outdir ./
 
 SWIGRUBY = swig -Wall -ruby -o $(SWIGRUBYCOUT) -outdir ./
 
@@ -91,10 +93,10 @@
 selinuxswig_python_exception.i: ../include/selinux/selinux.h
 	bash exception.sh > $@ 
 
-audit2why.lo: audit2why.c
+$(PYLIBVER)audit2why.lo: audit2why.c
 	$(CC) $(CFLAGS) -I$(PYINC) -fPIC -DSHARED -c -o $@ $<
 
-$(AUDIT2WHYSO): audit2why.lo
+$(AUDIT2WHYSO): $(PYLIBVER)audit2why.lo
 	$(CC) $(CFLAGS) $(LDFLAGS) -shared -o $@ $^ -L. -lselinux ${LIBDIR}/libsepol.a -L$(LIBDIR) -Wl,-soname,$@
 
 %.o:  %.c policy.h
@@ -123,8 +125,8 @@
 
 install-pywrap: pywrap
 	test -d $(PYTHONLIBDIR)/site-packages/selinux || install -m 755 -d $(PYTHONLIBDIR)/site-packages/selinux
-	install -m 755 $(SWIGSO) $(PYTHONLIBDIR)/site-packages/selinux
-	install -m 755 $(AUDIT2WHYSO) $(PYTHONLIBDIR)/site-packages/selinux
+	install -m 755 $(SWIGSO) $(PYTHONLIBDIR)/site-packages/selinux/_selinux.so
+	install -m 755 $(AUDIT2WHYSO) $(PYTHONLIBDIR)/site-packages/selinux/audit2why.so
 	install -m 644  selinux.py $(PYTHONLIBDIR)/site-packages/selinux/__init__.py
 
 install-rubywrap: rubywrap
diff -ur libselinux-2.0.94.orig/src/audit2why.c libselinux-2.0.94/src/audit2why.c
--- libselinux-2.0.94.orig/src/audit2why.c	2010-03-24 20:40:05.000000000 +0100
+++ libselinux-2.0.94/src/audit2why.c	2011-07-05 22:16:29.354000903 +0200
@@ -1,3 +1,6 @@
+/* Workaround for http://bugs.python.org/issue4835 */
+#define SIZEOF_SOCKET_T SIZEOF_INT
+
 #include <Python.h>
 #include <unistd.h>
 #include <stdlib.h>
@@ -353,7 +356,11 @@
 		strObj = PyList_GetItem(listObj, i); /* Can't fail */
 		
 		/* make it a string */
+#if PY_MAJOR_VERSION >= 3
+		permstr = _PyUnicode_AsString( strObj );
+#else
 		permstr = PyString_AsString( strObj );
+#endif
 		
 		perm = string_to_av_perm(tclass, permstr);
 		if (!perm) {
@@ -423,10 +430,39 @@
     {NULL, NULL, 0, NULL}        /* Sentinel */
 };
 
+#if PY_MAJOR_VERSION >= 3
+/* Module-initialization logic specific to Python 3 */
+struct module_state {
+	/* empty for now */
+};
+static struct PyModuleDef moduledef = {
+	PyModuleDef_HEAD_INIT,
+	"audit2why",
+	NULL,
+	sizeof(struct module_state),
+	audit2whyMethods,
+	NULL,
+	NULL,
+	NULL,
+	NULL
+};
+
+PyMODINIT_FUNC
+PyInit_audit2why(void)
+#else
 PyMODINIT_FUNC
 initaudit2why(void)
+#endif
 {
-	PyObject *m = Py_InitModule("audit2why", audit2whyMethods);
+	PyObject *m;
+#if PY_MAJOR_VERSION >= 3
+	m = PyModule_Create(&moduledef);
+	if (m == NULL) {
+		return NULL;
+	}
+#else
+	m  = Py_InitModule("audit2why", audit2whyMethods);
+#endif
 	PyModule_AddIntConstant(m,"UNKNOWN", UNKNOWN);
 	PyModule_AddIntConstant(m,"BADSCON", BADSCON);
 	PyModule_AddIntConstant(m,"BADTCON", BADTCON);
@@ -440,4 +476,8 @@
 	PyModule_AddIntConstant(m,"BOOLEAN", BOOLEAN);
 	PyModule_AddIntConstant(m,"CONSTRAINT", CONSTRAINT);
 	PyModule_AddIntConstant(m,"RBAC", RBAC);
+
+#if PY_MAJOR_VERSION >= 3
+	return m;
+#endif
 }
diff -ur libselinux-2.0.94.orig/src/selinuxswig_python.i libselinux-2.0.94/src/selinuxswig_python.i
--- libselinux-2.0.94.orig/src/selinuxswig_python.i	2010-03-24 20:40:05.000000000 +0100
+++ libselinux-2.0.94/src/selinuxswig_python.i	2011-07-06 19:08:28.224005295 +0200
@@ -37,7 +37,11 @@
 	PyObject* list = PyList_New(*$2);
 	int i;
 	for (i = 0; i < *$2; i++) {
+#if PY_VERSION_HEX >= 0x03000000
+		PyList_SetItem(list, i, PyUnicode_FromString((*$1)[i]));
+#else
 		PyList_SetItem(list, i, PyString_FromString((*$1)[i]));
+#endif
 	}
 	$result = SWIG_Python_AppendOutput($result, list);
 }
@@ -66,7 +70,15 @@
 			len++;
 		plist = PyList_New(len);
 		for (i = 0; i < len; i++) {
-			PyList_SetItem(plist, i, PyString_FromString((*$1)[i]));
+#if PY_VERSION_HEX >= 0x03000000
+			PyList_SetItem(plist, i, 
+                                       PyUnicode_FromString((*$1)[i])
+                                       );
+#else
+			PyList_SetItem(plist, i, 
+                                       PyString_FromString((*$1)[i])
+                                       );
+#endif
 		}
 	} else {
 		plist = PyList_New(0);
@@ -83,7 +95,16 @@
 	if (*$1) {
 		plist = PyList_New(result);
 		for (i = 0; i < result; i++) {
-			PyList_SetItem(plist, i, PyString_FromString((*$1)[i]));
+#if PY_VERSION_HEX >= 0x03000000
+			PyList_SetItem(plist, i, 
+                                       PyUnicode_FromString((*$1)[i])
+                                       );
+#else
+			PyList_SetItem(plist, i, 
+                                       PyString_FromString((*$1)[i])
+                                       );
+
+#endif
 		}
 	} else {
 		plist = PyList_New(0);
@@ -136,16 +157,27 @@
 	$1 = (char**) malloc(size + 1);
 
 	for(i = 0; i < size; i++) {
+#if PY_VERSION_HEX >= 0x03000000
+		if (!PyUnicode_Check(PySequence_GetItem($input, i))) {
+#else
 		if (!PyString_Check(PySequence_GetItem($input, i))) {
+#endif
 			PyErr_SetString(PyExc_ValueError, "Sequence must contain only strings");
+
 			return NULL;
 		}
+
 	}
 		
 	for(i = 0; i < size; i++) {
 		s = PySequence_GetItem($input, i);
+#if PY_VERSION_HEX >= 0x03000000
+		$1[i] = (char*) malloc(PyBytes_Size(s) + 1);
+		strcpy($1[i], PyUnicode_AsUTF8String(s));
+#else
 		$1[i] = (char*) malloc(PyString_Size(s) + 1);
 		strcpy($1[i], PyString_AsString(s));
+#endif
 	}
 	$1[size] = NULL;
 }
diff -ur libselinux-2.0.94.orig/src/selinuxswig_wrap.c libselinux-2.0.94/src/selinuxswig_wrap.c
--- libselinux-2.0.94.orig/src/selinuxswig_wrap.c	2010-03-24 20:40:05.000000000 +0100
+++ libselinux-2.0.94/src/selinuxswig_wrap.c	2011-07-06 21:31:36.159005797 +0200
@@ -5641,7 +5641,11 @@
     if (*arg3) {
       plist = PyList_New(result);
       for (i = 0; i < result; i++) {
+#if PY_VERSION_HEX >= 0x03000000
+        PyList_SetItem(plist, i, PyUnicode_FromString((*arg3)[i]));
+#else
         PyList_SetItem(plist, i, PyString_FromString((*arg3)[i]));
+#endif
       }
     } else {
       plist = PyList_New(0);
@@ -5714,7 +5718,11 @@
     if (*arg4) {
       plist = PyList_New(result);
       for (i = 0; i < result; i++) {
+#if PY_VERSION_HEX >= 0x03000000
+        PyList_SetItem(plist, i, PyUnicode_FromString((*arg4)[i]));
+#else
         PyList_SetItem(plist, i, PyString_FromString((*arg4)[i]));
+#endif
       }
     } else {
       plist = PyList_New(0);
@@ -6658,10 +6666,11 @@
   int result;
   
   if (!PyArg_ParseTuple(args,(char *)"O:setexeccon",&obj0)) SWIG_fail;
-  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
-  if (!SWIG_IsOK(res1)) {
-    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setexeccon" "', argument " "1"" of type '" "security_context_t""'");
-  }
+  // res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
+  // if (!SWIG_IsOK(res1)) {
+  //   SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setexeccon" "', argument " "1"" of type '" "security_context_t""'");
+  // }
+  buf1 = SWIG_Python_str_AsChar(obj0);
   arg1 = (security_context_t)(buf1);
   {
     result = (int)setexeccon(arg1); 
@@ -6672,9 +6681,11 @@
   }
   resultobj = SWIG_From_int((int)(result));
   if (alloc1 == SWIG_NEWOBJ) free((char*)buf1);
+  SWIG_Python_str_DelForPy3(buf1);
   return resultobj;
 fail:
   if (alloc1 == SWIG_NEWOBJ) free((char*)buf1);
+  SWIG_Python_str_DelForPy3(buf1);
   return NULL;
 }
 
@@ -9217,7 +9228,11 @@
       len++;
       plist = PyList_New(len);
       for (i = 0; i < len; i++) {
+#if PY_VERSION_HEX >= 0x03000000
+        PyList_SetItem(plist, i, PyUnicode_FromString((*arg3)[i]));
+#else
         PyList_SetItem(plist, i, PyString_FromString((*arg3)[i]));
+#endif
       }
     } else {
       plist = PyList_New(0);
@@ -9288,7 +9303,11 @@
       len++;
       plist = PyList_New(len);
       for (i = 0; i < len; i++) {
+#if PY_VERSION_HEX >= 0x03000000
+        PyList_SetItem(plist, i, PyUnicode_FromString((*arg3)[i]));
+#else
         PyList_SetItem(plist, i, PyString_FromString((*arg3)[i]));
+#endif
       }
     } else {
       plist = PyList_New(0);
@@ -9994,7 +10013,11 @@
     PyObject* list = PyList_New(*arg2);
     int i;
     for (i = 0; i < *arg2; i++) {
+#if PY_VERSION_HEX >= 0x03000000
+      PyList_SetItem(list, i, PyUnicode_FromString((*arg1)[i]));
+#else
       PyList_SetItem(list, i, PyString_FromString((*arg1)[i]));
+#endif
     }
     resultobj = SWIG_Python_AppendOutput(resultobj, list);
   }
@@ -11420,8 +11443,13 @@
     
     for(i = 0; i < size; i++) {
       s = PySequence_GetItem(obj2, i);
+#if PY_VERSION_HEX >= 0x03000000
+      arg3[i] = (char*) malloc(PyBytes_Size(s) + 1);
+      strcpy(arg3[i], PyUnicode_AsUTF8String(s));
+#else
       arg3[i] = (char*) malloc(PyString_Size(s) + 1);
       strcpy(arg3[i], PyString_AsString(s));
+#endif
     }
     arg3[size] = NULL;
   }
@@ -11447,8 +11475,13 @@
     
     for(i = 0; i < size; i++) {
       s = PySequence_GetItem(obj3, i);
+#if PY_VERSION_HEX >= 0x03000000
+      arg4[i] = (char*) malloc(PyBytes_Size(s) + 1);
+      strcpy(arg4[i], PyUnicode_AsUTF8String(s));
+#else
       arg4[i] = (char*) malloc(PyString_Size(s) + 1);
       strcpy(arg4[i], PyString_AsString(s));
+#endif
     }
     arg4[size] = NULL;
   }
