--- semanage/seobject.py.orig	2011-07-04 20:29:23.859999603 +0200
+++ semanage/seobject.py	2011-07-04 20:39:32.292000183 +0200
@@ -17,7 +17,7 @@
 #    You should have received a copy of the GNU General Public License
 #    along with this program; if not, write to the Free Software
 #    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA     
-#                                        02111-1307  USA
+#					02111-1307  USA
 #
 #  
 
@@ -45,29 +45,29 @@
 
        handle = semanage_handle_create()
        if not handle:
-              raise ValueError(_("Could not create semanage handle"))
+	      raise ValueError(_("Could not create semanage handle"))
        
        if store != "":
-              semanage_select_store(handle, store, SEMANAGE_CON_DIRECT);
+	      semanage_select_store(handle, store, SEMANAGE_CON_DIRECT);
 
        if not semanage_is_managed(handle):
-              semanage_handle_destroy(handle)
-              raise ValueError(_("SELinux policy is not managed or store cannot be accessed."))
+	      semanage_handle_destroy(handle)
+	      raise ValueError(_("SELinux policy is not managed or store cannot be accessed."))
 
        rc = semanage_access_check(handle)
        if rc < SEMANAGE_CAN_READ:
-              semanage_handle_destroy(handle)
-              raise ValueError(_("Cannot read policy store."))
+	      semanage_handle_destroy(handle)
+	      raise ValueError(_("Cannot read policy store."))
 
        rc = semanage_connect(handle)
        if rc < 0:
-              semanage_handle_destroy(handle)
-              raise ValueError(_("Could not establish semanage connection"))
+	      semanage_handle_destroy(handle)
+	      raise ValueError(_("Could not establish semanage connection"))
 
        is_mls_enabled = semanage_mls_enabled(handle)
        if is_mls_enabled < 0:
-              semanage_handle_destroy(handle)
-              raise ValueError(_("Could not test MLS enabled status"))
+	      semanage_handle_destroy(handle)
+	      raise ValueError(_("Could not test MLS enabled status"))
 
        return handle
 
@@ -127,32 +127,32 @@
 try:
        tree = xml.etree.ElementTree.parse("/usr/share/selinux/devel/policy.xml")
        for l in  tree.findall("layer"):
-              for m in  l.findall("module"):
-                     for b in  m.findall("tunable"):
-                            desc = b.find("desc").find("p").text.strip("\n")
-                            desc = re.sub("\n", " ", desc)
-                            booleans_dict[b.get('name')] = (m.get("name"), b.get('dftval'), desc)
-                     for b in  m.findall("bool"):
-                            desc = b.find("desc").find("p").text.strip("\n")
-                            desc = re.sub("\n", " ", desc)
-                            booleans_dict[b.get('name')] = (m.get("name"), b.get('dftval'), desc)
-              for i in  tree.findall("bool"):
-                     desc = i.find("desc").find("p").text.strip("\n")
-                     desc = re.sub("\n", " ", desc)
-                     booleans_dict[i.get('name')] = (_("global"), i.get('dftval'), desc)
+	      for m in  l.findall("module"):
+		     for b in  m.findall("tunable"):
+			    desc = b.find("desc").find("p").text.strip("\n")
+			    desc = re.sub("\n", " ", desc)
+			    booleans_dict[b.get('name')] = (m.get("name"), b.get('dftval'), desc)
+		     for b in  m.findall("bool"):
+			    desc = b.find("desc").find("p").text.strip("\n")
+			    desc = re.sub("\n", " ", desc)
+			    booleans_dict[b.get('name')] = (m.get("name"), b.get('dftval'), desc)
+	      for i in  tree.findall("bool"):
+		     desc = i.find("desc").find("p").text.strip("\n")
+		     desc = re.sub("\n", " ", desc)
+		     booleans_dict[i.get('name')] = (_("global"), i.get('dftval'), desc)
        for i in  tree.findall("tunable"):
-              desc = i.find("desc").find("p").text.strip("\n")
-              desc = re.sub("\n", " ", desc)
-              booleans_dict[i.get('name')] = (_("global"), i.get('dftval'), desc)
-except IOError, e:
+	      desc = i.find("desc").find("p").text.strip("\n")
+	      desc = re.sub("\n", " ", desc)
+	      booleans_dict[i.get('name')] = (_("global"), i.get('dftval'), desc)
+except IOError as e:
        #print _("Failed to translate booleans.\n%s") % e
        pass
 
 def boolean_desc(boolean):
        if boolean in booleans_dict:
-              return _(booleans_dict[boolean][2])
+	      return _(booleans_dict[boolean][2])
        else:
-              return boolean
+	      return boolean
 
 def validate_level(raw):
 	sensitivity = "s[0-9]*"
@@ -163,8 +163,8 @@
 	return re.search("^" + reg +"$", raw)
 
 def translate(raw, prepend = 1):
-        filler = "a:b:c:"
-        if prepend == 1:
+	filler = "a:b:c:"
+	if prepend == 1:
 		context = "%s%s" % (filler, raw)
 	else:
 		context = raw
@@ -179,7 +179,7 @@
 		return trans
 	
 def untranslate(trans, prepend = 1):
-        filler = "a:b:c:"
+	filler = "a:b:c:"
  	if prepend == 1:
 		context = "%s%s" % (filler, trans)
 	else:
@@ -197,129 +197,129 @@
 	
 class semanageRecords:
 	def __init__(self, store):
-               global handle
-                      
-               if handle != None:
-                      self.sh = handle
-               else:
-                      self.sh = get_handle(store)
-               self.transaction = False
-
-        def deleteall(self):
-               raise ValueError(_("Not yet implemented"))
-
-        def start(self):
-               if self.transaction:
-                      raise ValueError(_("Semanage transaction already in progress"))
-               self.begin()
-               self.transaction = True
-
-        def begin(self):
-               if self.transaction:
-                      return
-               rc = semanage_begin_transaction(self.sh)
-               if rc < 0:
-                      raise ValueError(_("Could not start semanage transaction"))
-        def commit(self):
-               if self.transaction:
-                      return
-               rc = semanage_commit(self.sh) 
-               if rc < 0:
-                      raise ValueError(_("Could not commit semanage transaction"))
-
-        def finish(self):
-               if not self.transaction:
-                      raise ValueError(_("Semanage transaction not in progress"))
-               self.transaction = False
-               self.commit()
+	       global handle
+		      
+	       if handle != None:
+		      self.sh = handle
+	       else:
+		      self.sh = get_handle(store)
+	       self.transaction = False
+
+	def deleteall(self):
+	       raise ValueError(_("Not yet implemented"))
+
+	def start(self):
+	       if self.transaction:
+		      raise ValueError(_("Semanage transaction already in progress"))
+	       self.begin()
+	       self.transaction = True
+
+	def begin(self):
+	       if self.transaction:
+		      return
+	       rc = semanage_begin_transaction(self.sh)
+	       if rc < 0:
+		      raise ValueError(_("Could not start semanage transaction"))
+	def commit(self):
+	       if self.transaction:
+		      return
+	       rc = semanage_commit(self.sh) 
+	       if rc < 0:
+		      raise ValueError(_("Could not commit semanage transaction"))
+
+	def finish(self):
+	       if not self.transaction:
+		      raise ValueError(_("Semanage transaction not in progress"))
+	       self.transaction = False
+	       self.commit()
 
 class dontauditClass(semanageRecords):
 	def __init__(self, store):
-               semanageRecords.__init__(self, store)
+	       semanageRecords.__init__(self, store)
 
 	def toggle(self, dontaudit):
-               if dontaudit not in [ "on", "off" ]:
-                      raise ValueError(_("dontaudit requires either 'on' or 'off'"))
-               self.begin()
-               rc = semanage_set_disable_dontaudit(self.sh, dontaudit == "off")
-               self.commit()
-               
+	       if dontaudit not in [ "on", "off" ]:
+		      raise ValueError(_("dontaudit requires either 'on' or 'off'"))
+	       self.begin()
+	       rc = semanage_set_disable_dontaudit(self.sh, dontaudit == "off")
+	       self.commit()
+	       
 class permissiveRecords(semanageRecords):
 	def __init__(self, store):
-               semanageRecords.__init__(self, store)
+	       semanageRecords.__init__(self, store)
 
 	def get_all(self):
-               l = []
-               (rc, mlist, number) = semanage_module_list(self.sh)
-               if rc < 0:
-                      raise ValueError(_("Could not list SELinux modules"))
-
-               for i in range(number):
-                      mod = semanage_module_list_nth(mlist, i)
-                      name = semanage_module_get_name(mod)
-                      if name and name.startswith("permissive_"):
-                             l.append(name.split("permissive_")[1])
-               return l
+	       l = []
+	       (rc, mlist, number) = semanage_module_list(self.sh)
+	       if rc < 0:
+		      raise ValueError(_("Could not list SELinux modules"))
+
+	       for i in range(number):
+		      mod = semanage_module_list_nth(mlist, i)
+		      name = semanage_module_get_name(mod)
+		      if name and name.startswith("permissive_"):
+			     l.append(name.split("permissive_")[1])
+	       return l
 
 	def list(self, heading = 1, locallist = 0):
 		if heading:
 			print "\n%-25s\n" % (_("Permissive Types"))
-                for t in self.get_all():
-                       print t
+		for t in self.get_all():
+		       print t
 
 
 	def add(self, type):
-               import glob
-               name = "permissive_%s" % type
-               dirname = "/var/lib/selinux"
-               os.chdir(dirname)
-               filename = "%s.te" % name
-               modtxt = """
+	       import glob
+	       name = "permissive_%s" % type
+	       dirname = "/var/lib/selinux"
+	       os.chdir(dirname)
+	       filename = "%s.te" % name
+	       modtxt = """
 module %s 1.0;
 
 require {
-          type %s;
+	  type %s;
 }
 
 permissive %s;
 """ % (name, type, type)
-               fd = open(filename, 'w')
-               fd.write(modtxt)
-               fd.close()
-               mc = module.ModuleCompiler()
-               mc.create_module_package(filename, 1)
-               fd = open("permissive_%s.pp" % type)
-               data = fd.read()
-               fd.close()
-
-               rc = semanage_module_install(self.sh, data, len(data));
-               if rc >= 0:
-                      self.commit()
-
-               for root, dirs, files in os.walk("tmp", topdown = False):
-                      for name in files:
-                             os.remove(os.path.join(root, name))
-                      for name in dirs:
-                             os.rmdir(os.path.join(root, name))
-               os.removedirs("tmp")
-               for i in glob.glob("permissive_%s.*" % type):
-                      os.remove(i)
-               if rc < 0:
+	       fd = open(filename, 'w')
+	       fd.write(modtxt)
+	       fd.close()
+	       mc = module.ModuleCompiler()
+	       mc.create_module_package(filename, 1)
+	       fd = open("permissive_%s.pp" % type)
+	       data = fd.read()
+	       fd.close()
+
+	       rc = semanage_module_install(self.sh, data, len(data));
+	       if rc >= 0:
+		      self.commit()
+
+	       for root, dirs, files in os.walk("tmp", topdown = False):
+		      for name in files:
+			     os.remove(os.path.join(root, name))
+		      for name in dirs:
+			     os.rmdir(os.path.join(root, name))
+	       os.removedirs("tmp")
+	       for i in glob.glob("permissive_%s.*" % type):
+		      os.remove(i)
+	       if rc < 0:
 			raise ValueError(_("Could not set permissive domain %s (module installation failed)") % name)
 
 	def delete(self, name):
-               for n in name.split():
-                      rc = semanage_module_remove(self.sh, "permissive_%s" % n)
-                      if rc < 0:
-                             raise ValueError(_("Could not remove permissive domain %s (remove failed)") % name)
-                      
-               self.commit()
+	       for n in name.split():
+		      rc = semanage_module_remove(self.sh, "permissive_%s" % n)
+		      if rc < 0:
+			     raise ValueError(_("Could not remove permissive domain %s (remove failed)") % name)
+		      
+	       self.commit()
 			
 	def deleteall(self):
-               l = self.get_all()
-               if len(l) > 0:
-                      all = " ".join(l)
-                      self.delete(all)
+	       l = self.get_all()
+	       if len(l) > 0:
+		      all = " ".join(l)
+		      self.delete(all)
 
 class loginRecords(semanageRecords):
 	def __init__(self, store = ""):
@@ -344,46 +344,46 @@
 			raise ValueError(_("Could not check if login mapping for %s is defined") % name)
 		if exists:
 			raise ValueError(_("Login mapping for %s is already defined") % name)
-                if name[0] == '%':
-                       try:
-                              grp.getgrnam(name[1:])
-                       except:
-                              raise ValueError(_("Linux Group %s does not exist") % name[1:])
-                else:
-                       try:
-                              pwd.getpwnam(name)
-                       except:
-                              raise ValueError(_("Linux User %s does not exist") % name)
-
-                (rc, u) = semanage_seuser_create(self.sh)
-                if rc < 0:
-                       raise ValueError(_("Could not create login mapping for %s") % name)
-
-                rc = semanage_seuser_set_name(self.sh, u, name)
-                if rc < 0:
-                       raise ValueError(_("Could not set name for %s") % name)
-
-                if serange != "":
-                       rc = semanage_seuser_set_mlsrange(self.sh, u, serange)
-                       if rc < 0:
-                              raise ValueError(_("Could not set MLS range for %s") % name)
-
-                rc = semanage_seuser_set_sename(self.sh, u, sename)
-                if rc < 0:
-                       raise ValueError(_("Could not set SELinux user for %s") % name)
-
-                rc = semanage_seuser_modify_local(self.sh, k, u)
-                if rc < 0:
-                       raise ValueError(_("Could not add login mapping for %s") % name)
+		if name[0] == '%':
+		       try:
+			      grp.getgrnam(name[1:])
+		       except:
+			      raise ValueError(_("Linux Group %s does not exist") % name[1:])
+		else:
+		       try:
+			      pwd.getpwnam(name)
+		       except:
+			      raise ValueError(_("Linux User %s does not exist") % name)
+
+		(rc, u) = semanage_seuser_create(self.sh)
+		if rc < 0:
+		       raise ValueError(_("Could not create login mapping for %s") % name)
+
+		rc = semanage_seuser_set_name(self.sh, u, name)
+		if rc < 0:
+		       raise ValueError(_("Could not set name for %s") % name)
+
+		if serange != "":
+		       rc = semanage_seuser_set_mlsrange(self.sh, u, serange)
+		       if rc < 0:
+			      raise ValueError(_("Could not set MLS range for %s") % name)
+
+		rc = semanage_seuser_set_sename(self.sh, u, sename)
+		if rc < 0:
+		       raise ValueError(_("Could not set SELinux user for %s") % name)
+
+		rc = semanage_seuser_modify_local(self.sh, k, u)
+		if rc < 0:
+		       raise ValueError(_("Could not add login mapping for %s") % name)
 
 		semanage_seuser_key_free(k)
 		semanage_seuser_free(u)
 
 	def add(self, name, sename, serange):
 		try:
-                        self.begin()
-                        self.__add(name, sename, serange)
-                        self.commit()
+			self.begin()
+			self.__add(name, sename, serange)
+			self.commit()
 
 		except ValueError, error:
 			mylog.log(0, _("add SELinux user mapping"), name, sename, "", serange);
@@ -392,82 +392,82 @@
 		mylog.log(1, _("add SELinux user mapping"), name, sename, "", serange);
 
 	def __modify(self, name, sename = "", serange = ""):
-               if sename == "" and serange == "":
-                      raise ValueError(_("Requires seuser or serange"))
+	       if sename == "" and serange == "":
+		      raise ValueError(_("Requires seuser or serange"))
 
-               (rc, k) = semanage_seuser_key_create(self.sh, name)
-               if rc < 0:
-                      raise ValueError(_("Could not create a key for %s") % name)
-
-               (rc, exists) = semanage_seuser_exists(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("Login mapping for %s is not defined") % name)
-
-               (rc, u) = semanage_seuser_query(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not query seuser for %s") % name)
-
-               oldserange = semanage_seuser_get_mlsrange(u)
-               oldsename = semanage_seuser_get_sename(u)
-               if serange != "":
-                      semanage_seuser_set_mlsrange(self.sh, u, untranslate(serange))
-               else:
-                      serange = oldserange
-
-               if sename != "":
-                      semanage_seuser_set_sename(self.sh, u, sename)
-               else:
-                      sename = oldsename
-
-               rc = semanage_seuser_modify_local(self.sh, k, u)
-               if rc < 0:
-                      raise ValueError(_("Could not modify login mapping for %s") % name)
+	       (rc, k) = semanage_seuser_key_create(self.sh, name)
+	       if rc < 0:
+		      raise ValueError(_("Could not create a key for %s") % name)
+
+	       (rc, exists) = semanage_seuser_exists(self.sh, k)
+	       if rc < 0:
+		      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
+	       if not exists:
+		      raise ValueError(_("Login mapping for %s is not defined") % name)
+
+	       (rc, u) = semanage_seuser_query(self.sh, k)
+	       if rc < 0:
+		      raise ValueError(_("Could not query seuser for %s") % name)
+
+	       oldserange = semanage_seuser_get_mlsrange(u)
+	       oldsename = semanage_seuser_get_sename(u)
+	       if serange != "":
+		      semanage_seuser_set_mlsrange(self.sh, u, untranslate(serange))
+	       else:
+		      serange = oldserange
+
+	       if sename != "":
+		      semanage_seuser_set_sename(self.sh, u, sename)
+	       else:
+		      sename = oldsename
 
-               semanage_seuser_key_free(k)
-               semanage_seuser_free(u)
+	       rc = semanage_seuser_modify_local(self.sh, k, u)
+	       if rc < 0:
+		      raise ValueError(_("Could not modify login mapping for %s") % name)
 
-               mylog.log(1, "modify selinux user mapping", name, sename, "", serange, oldsename, "", oldserange);
+	       semanage_seuser_key_free(k)
+	       semanage_seuser_free(u)
+
+	       mylog.log(1, "modify selinux user mapping", name, sename, "", serange, oldsename, "", oldserange);
 
 	def modify(self, name, sename = "", serange = ""):
 		try:
-                        self.begin()
-                        self.__modify(name, sename, serange)
-                        self.commit()
+			self.begin()
+			self.__modify(name, sename, serange)
+			self.commit()
 
 		except ValueError, error:
 			mylog.log(0, "modify selinux user mapping", name, sename, "", serange, "", "", "");
 			raise error
 		
 	def __delete(self, name):
-               (rc, k) = semanage_seuser_key_create(self.sh, name)
-               if rc < 0:
-                      raise ValueError(_("Could not create a key for %s") % name)
-
-               (rc, exists) = semanage_seuser_exists(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("Login mapping for %s is not defined") % name)
-
-               (rc, exists) = semanage_seuser_exists_local(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("Login mapping for %s is defined in policy, cannot be deleted") % name)
-
-               rc = semanage_seuser_del_local(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not delete login mapping for %s") % name)
+	       (rc, k) = semanage_seuser_key_create(self.sh, name)
+	       if rc < 0:
+		      raise ValueError(_("Could not create a key for %s") % name)
+
+	       (rc, exists) = semanage_seuser_exists(self.sh, k)
+	       if rc < 0:
+		      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
+	       if not exists:
+		      raise ValueError(_("Login mapping for %s is not defined") % name)
+
+	       (rc, exists) = semanage_seuser_exists_local(self.sh, k)
+	       if rc < 0:
+		      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
+	       if not exists:
+		      raise ValueError(_("Login mapping for %s is defined in policy, cannot be deleted") % name)
+
+	       rc = semanage_seuser_del_local(self.sh, k)
+	       if rc < 0:
+		      raise ValueError(_("Could not delete login mapping for %s") % name)
 
-               semanage_seuser_key_free(k)
+	       semanage_seuser_key_free(k)
 
 	def delete(self, name):
 		try:
-                       self.begin()
-                       self.__delete(name)
-                       self.commit()
+		       self.begin()
+		       self.__delete(name)
+		       self.commit()
 
 		except ValueError, error:
 			mylog.log(0, "delete SELinux user mapping", name);
@@ -477,10 +477,10 @@
 
 	def get_all(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.ulist) = semanage_seuser_list_local(self.sh)
-                else:
-                       (rc, self.ulist) = semanage_seuser_list(self.sh)
+		if locallist:
+		       (rc, self.ulist) = semanage_seuser_list_local(self.sh)
+		else:
+		       (rc, self.ulist) = semanage_seuser_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list login mappings"))
 
@@ -520,116 +520,116 @@
 			else:
 				selevel = untranslate(selevel)
 			
-                if len(roles) < 1:
-                       raise ValueError(_("You must add at least one role for %s") % name)
-                       
-                (rc, k) = semanage_user_key_create(self.sh, name)
-                if rc < 0:
-                       raise ValueError(_("Could not create a key for %s") % name)
-
-                (rc, exists) = semanage_user_exists(self.sh, k)
-                if rc < 0:
-                       raise ValueError(_("Could not check if SELinux user %s is defined") % name)
-                if exists:
-                       raise ValueError(_("SELinux user %s is already defined") % name)
-
-                (rc, u) = semanage_user_create(self.sh)
-                if rc < 0:
-                       raise ValueError(_("Could not create SELinux user for %s") % name)
-
-                rc = semanage_user_set_name(self.sh, u, name)
-                if rc < 0:
-                       raise ValueError(_("Could not set name for %s") % name)
-
-                for r in roles:
-                       rc = semanage_user_add_role(self.sh, u, r)
-                       if rc < 0:
-                              raise ValueError(_("Could not add role %s for %s") % (r, name))
-
-                if is_mls_enabled == 1:
-                       rc = semanage_user_set_mlsrange(self.sh, u, serange)
-                       if rc < 0:
-                              raise ValueError(_("Could not set MLS range for %s") % name)
-
-                       rc = semanage_user_set_mlslevel(self.sh, u, selevel)
-                       if rc < 0:
-                              raise ValueError(_("Could not set MLS level for %s") % name)
-                rc = semanage_user_set_prefix(self.sh, u, prefix)
-                if rc < 0:
-                       raise ValueError(_("Could not add prefix %s for %s") % (r, prefix))
-                (rc, key) = semanage_user_key_extract(self.sh,u)
-                if rc < 0:
-                       raise ValueError(_("Could not extract key for %s") % name)
-
-                rc = semanage_user_modify_local(self.sh, k, u)
-                if rc < 0:
-                       raise ValueError(_("Could not add SELinux user %s") % name)
+		if len(roles) < 1:
+		       raise ValueError(_("You must add at least one role for %s") % name)
+		       
+		(rc, k) = semanage_user_key_create(self.sh, name)
+		if rc < 0:
+		       raise ValueError(_("Could not create a key for %s") % name)
+
+		(rc, exists) = semanage_user_exists(self.sh, k)
+		if rc < 0:
+		       raise ValueError(_("Could not check if SELinux user %s is defined") % name)
+		if exists:
+		       raise ValueError(_("SELinux user %s is already defined") % name)
+
+		(rc, u) = semanage_user_create(self.sh)
+		if rc < 0:
+		       raise ValueError(_("Could not create SELinux user for %s") % name)
+
+		rc = semanage_user_set_name(self.sh, u, name)
+		if rc < 0:
+		       raise ValueError(_("Could not set name for %s") % name)
+
+		for r in roles:
+		       rc = semanage_user_add_role(self.sh, u, r)
+		       if rc < 0:
+			      raise ValueError(_("Could not add role %s for %s") % (r, name))
 
-                semanage_user_key_free(k)
-                semanage_user_free(u)
+		if is_mls_enabled == 1:
+		       rc = semanage_user_set_mlsrange(self.sh, u, serange)
+		       if rc < 0:
+			      raise ValueError(_("Could not set MLS range for %s") % name)
+
+		       rc = semanage_user_set_mlslevel(self.sh, u, selevel)
+		       if rc < 0:
+			      raise ValueError(_("Could not set MLS level for %s") % name)
+		rc = semanage_user_set_prefix(self.sh, u, prefix)
+		if rc < 0:
+		       raise ValueError(_("Could not add prefix %s for %s") % (r, prefix))
+		(rc, key) = semanage_user_key_extract(self.sh,u)
+		if rc < 0:
+		       raise ValueError(_("Could not extract key for %s") % name)
+
+		rc = semanage_user_modify_local(self.sh, k, u)
+		if rc < 0:
+		       raise ValueError(_("Could not add SELinux user %s") % name)
+
+		semanage_user_key_free(k)
+		semanage_user_free(u)
 
 	def add(self, name, roles, selevel, serange, prefix):
 		seroles = " ".join(roles)
-                try:
-                       self.begin()
-                       self.__add( name, roles, selevel, serange, prefix)
-                       self.commit()
+		try:
+		       self.begin()
+		       self.__add( name, roles, selevel, serange, prefix)
+		       self.commit()
 		except ValueError, error:
 			mylog.log(0,"add SELinux user record", name, name, seroles, serange)
 			raise error
 		
 		mylog.log(1,"add SELinux user record", name, name, seroles, serange)
 
-        def __modify(self, name, roles = [], selevel = "", serange = "", prefix = ""):
+	def __modify(self, name, roles = [], selevel = "", serange = "", prefix = ""):
 		oldroles = ""
 		oldserange = ""
 		newroles = string.join(roles, ' ');
-                if prefix == "" and len(roles) == 0  and serange == "" and selevel == "":
-                       if is_mls_enabled == 1:
-                              raise ValueError(_("Requires prefix, roles, level or range"))
-                       else:
-                              raise ValueError(_("Requires prefix or roles"))
-
-                (rc, k) = semanage_user_key_create(self.sh, name)
-                if rc < 0:
-                       raise ValueError(_("Could not create a key for %s") % name)
-
-                (rc, exists) = semanage_user_exists(self.sh, k)
-                if rc < 0:
-                       raise ValueError(_("Could not check if SELinux user %s is defined") % name)
-                if not exists:
-                       raise ValueError(_("SELinux user %s is not defined") % name)
-
-                (rc, u) = semanage_user_query(self.sh, k)
-                if rc < 0:
-                       raise ValueError(_("Could not query user for %s") % name)
-
-                oldserange = semanage_user_get_mlsrange(u)
-                (rc, rlist) = semanage_user_get_roles(self.sh, u)
-                if rc >= 0:
-                       oldroles = string.join(rlist, ' ');
-                       newroles = newroles + ' ' + oldroles;
-
-
-                if serange != "":
-                       semanage_user_set_mlsrange(self.sh, u, untranslate(serange))
-                if selevel != "":
-                       semanage_user_set_mlslevel(self.sh, u, untranslate(selevel))
-
-                if prefix != "":
-                       semanage_user_set_prefix(self.sh, u, prefix)
-
-                if len(roles) != 0:
-                       for r in rlist:
-                              if r not in roles:
-                                     semanage_user_del_role(u, r)
-                       for r in roles:
-                              if r not in rlist:
-                                     semanage_user_add_role(self.sh, u, r)
-
-                rc = semanage_user_modify_local(self.sh, k, u)
-                if rc < 0:
-                       raise ValueError(_("Could not modify SELinux user %s") % name)
+		if prefix == "" and len(roles) == 0  and serange == "" and selevel == "":
+		       if is_mls_enabled == 1:
+			      raise ValueError(_("Requires prefix, roles, level or range"))
+		       else:
+			      raise ValueError(_("Requires prefix or roles"))
+
+		(rc, k) = semanage_user_key_create(self.sh, name)
+		if rc < 0:
+		       raise ValueError(_("Could not create a key for %s") % name)
+
+		(rc, exists) = semanage_user_exists(self.sh, k)
+		if rc < 0:
+		       raise ValueError(_("Could not check if SELinux user %s is defined") % name)
+		if not exists:
+		       raise ValueError(_("SELinux user %s is not defined") % name)
+
+		(rc, u) = semanage_user_query(self.sh, k)
+		if rc < 0:
+		       raise ValueError(_("Could not query user for %s") % name)
+
+		oldserange = semanage_user_get_mlsrange(u)
+		(rc, rlist) = semanage_user_get_roles(self.sh, u)
+		if rc >= 0:
+		       oldroles = string.join(rlist, ' ');
+		       newroles = newroles + ' ' + oldroles;
+
+
+		if serange != "":
+		       semanage_user_set_mlsrange(self.sh, u, untranslate(serange))
+		if selevel != "":
+		       semanage_user_set_mlslevel(self.sh, u, untranslate(selevel))
+
+		if prefix != "":
+		       semanage_user_set_prefix(self.sh, u, prefix)
+
+		if len(roles) != 0:
+		       for r in rlist:
+			      if r not in roles:
+				     semanage_user_del_role(u, r)
+		       for r in roles:
+			      if r not in rlist:
+				     semanage_user_add_role(self.sh, u, r)
+
+		rc = semanage_user_modify_local(self.sh, k, u)
+		if rc < 0:
+		       raise ValueError(_("Could not modify SELinux user %s") % name)
 
 		semanage_user_key_free(k)
 		semanage_user_free(u)
@@ -639,42 +639,42 @@
 
 	def modify(self, name, roles = [], selevel = "", serange = "", prefix = ""):
 		try:
-                        self.begin()
-                        self.__modify(name, roles, selevel, serange, prefix)
-                        self.commit()
+			self.begin()
+			self.__modify(name, roles, selevel, serange, prefix)
+			self.commit()
 
 		except ValueError, error:
 			mylog.log(0,"modify SELinux user record", name, "", " ".join(roles), serange, "", "", "")
 			raise error
 
 	def __delete(self, name):
-               (rc, k) = semanage_user_key_create(self.sh, name)
-               if rc < 0:
-                      raise ValueError(_("Could not create a key for %s") % name)
+	       (rc, k) = semanage_user_key_create(self.sh, name)
+	       if rc < 0:
+		      raise ValueError(_("Could not create a key for %s") % name)
 			
-               (rc, exists) = semanage_user_exists(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if SELinux user %s is defined") % name)		
-               if not exists:
-                      raise ValueError(_("SELinux user %s is not defined") % name)
-
-               (rc, exists) = semanage_user_exists_local(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if SELinux user %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("SELinux user %s is defined in policy, cannot be deleted") % name)
+	       (rc, exists) = semanage_user_exists(self.sh, k)
+	       if rc < 0:
+		      raise ValueError(_("Could not check if SELinux user %s is defined") % name)		
+	       if not exists:
+		      raise ValueError(_("SELinux user %s is not defined") % name)
+
+	       (rc, exists) = semanage_user_exists_local(self.sh, k)
+	       if rc < 0:
+		      raise ValueError(_("Could not check if SELinux user %s is defined") % name)
+	       if not exists:
+		      raise ValueError(_("SELinux user %s is defined in policy, cannot be deleted") % name)
 			
-               rc = semanage_user_del_local(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not delete SELinux user %s") % name)
+	       rc = semanage_user_del_local(self.sh, k)
+	       if rc < 0:
+		      raise ValueError(_("Could not delete SELinux user %s") % name)
 
-               semanage_user_key_free(k)		
+	       semanage_user_key_free(k)		
 
 	def delete(self, name):
 		try:
-                        self.begin()
-                        self.__delete(name)
-                        self.commit()
+			self.begin()
+			self.__delete(name)
+			self.commit()
 
 		except ValueError, error:
 			mylog.log(0,"delete SELinux user record", name)
@@ -684,10 +684,10 @@
 
 	def get_all(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.ulist) = semanage_user_list_local(self.sh)
-                else:
-                       (rc, self.ulist) = semanage_user_list(self.sh)
+		if locallist:
+		       (rc, self.ulist) = semanage_user_list_local(self.sh)
+		else:
+		       (rc, self.ulist) = semanage_user_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list SELinux users"))
 
@@ -803,9 +803,9 @@
 		semanage_port_free(p)
 
 	def add(self, port, proto, serange, type):
-                self.begin()
-                self.__add(port, proto, serange, type)
-                self.commit()
+		self.begin()
+		self.__add(port, proto, serange, type)
+		self.commit()
 
 	def __modify(self, port, proto, serange, setype):
 		if serange == "" and setype == "":
@@ -841,33 +841,33 @@
 		semanage_port_free(p)
 
 	def modify(self, port, proto, serange, setype):
-                self.begin()
-                self.__modify(port, proto, serange, setype)
-                self.commit()
+		self.begin()
+		self.__modify(port, proto, serange, setype)
+		self.commit()
 
 	def deleteall(self):
 		(rc, plist) = semanage_port_list_local(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list the ports"))
 
-                self.begin()
+		self.begin()
 
 		for port in plist:
-                       proto = semanage_port_get_proto(port)
-                       proto_str = semanage_port_get_proto_str(proto)
-                       low = semanage_port_get_low(port)
-                       high = semanage_port_get_high(port)
-                       port_str = "%s-%s" % (low, high)
-                       ( k, proto_d, low, high ) = self.__genkey(port_str , proto_str)
-                       if rc < 0:
-                              raise ValueError(_("Could not create a key for %s") % port_str)
-
-                       rc = semanage_port_del_local(self.sh, k)
-                       if rc < 0:
-                              raise ValueError(_("Could not delete the port %s") % port_str)
-                       semanage_port_key_free(k)
+		       proto = semanage_port_get_proto(port)
+		       proto_str = semanage_port_get_proto_str(proto)
+		       low = semanage_port_get_low(port)
+		       high = semanage_port_get_high(port)
+		       port_str = "%s-%s" % (low, high)
+		       ( k, proto_d, low, high ) = self.__genkey(port_str , proto_str)
+		       if rc < 0:
+			      raise ValueError(_("Could not create a key for %s") % port_str)
+
+		       rc = semanage_port_del_local(self.sh, k)
+		       if rc < 0:
+			      raise ValueError(_("Could not delete the port %s") % port_str)
+		       semanage_port_key_free(k)
 	
-                self.commit()
+		self.commit()
 
 	def __delete(self, port, proto):
 		( k, proto_d, low, high ) = self.__genkey(port, proto)
@@ -890,16 +890,16 @@
 		semanage_port_key_free(k)
 
 	def delete(self, port, proto):
-                self.begin()
-                self.__delete(port, proto)
-                self.commit()
+		self.begin()
+		self.__delete(port, proto)
+		self.commit()
 
 	def get_all(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.plist) = semanage_port_list_local(self.sh)
-                else:
-                       (rc, self.plist) = semanage_port_list(self.sh)
+		if locallist:
+		       (rc, self.plist) = semanage_port_list_local(self.sh)
+		else:
+		       (rc, self.plist) = semanage_port_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list ports"))
 
@@ -918,10 +918,10 @@
 
 	def get_all_by_type(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.plist) = semanage_port_list_local(self.sh)
-                else:
-                       (rc, self.plist) = semanage_port_list(self.sh)
+		if locallist:
+		       (rc, self.plist) = semanage_port_list_local(self.sh)
+		else:
+		       (rc, self.plist) = semanage_port_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list ports"))
 
@@ -957,218 +957,218 @@
 
 class nodeRecords(semanageRecords):
        def __init__(self, store = ""):
-               semanageRecords.__init__(self,store)
+	       semanageRecords.__init__(self,store)
 
        def __add(self, addr, mask, proto, serange, ctype):
-               if addr == "":
-                       raise ValueError(_("Node Address is required"))
+	       if addr == "":
+		       raise ValueError(_("Node Address is required"))
 
-               if mask == "":
-                       raise ValueError(_("Node Netmask is required"))
+	       if mask == "":
+		       raise ValueError(_("Node Netmask is required"))
 
 	       if proto == "ipv4":
-                       proto = 0
-               elif proto == "ipv6":
-                       proto = 1
-               else:
-                      raise ValueError(_("Unknown or missing protocol"))
-
-
-               if is_mls_enabled == 1:
-                       if serange == "":
-                               serange = "s0"
-                       else:
-                               serange = untranslate(serange)
-
-               if ctype == "":
-                       raise ValueError(_("SELinux Type is required"))
-
-               (rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
-               if rc < 0:
-                       raise ValueError(_("Could not create key for %s") % addr)
-               if rc < 0:
-                       raise ValueError(_("Could not check if addr %s is defined") % addr)
-
-               (rc, exists) = semanage_node_exists(self.sh, k)
-               if exists:
-                       raise ValueError(_("Addr %s already defined") % addr)
-
-               (rc, node) = semanage_node_create(self.sh)
-               if rc < 0:
-                       raise ValueError(_("Could not create addr for %s") % addr)
-
-               rc = semanage_node_set_addr(self.sh, node, proto, addr)
-               (rc, con) = semanage_context_create(self.sh)
-               if rc < 0:
-                       raise ValueError(_("Could not create context for %s") % addr)
-
-               rc = semanage_node_set_mask(self.sh, node, proto, mask)
-               if rc < 0:
-                       raise ValueError(_("Could not set mask for %s") % addr)
-
-
-               rc = semanage_context_set_user(self.sh, con, "system_u")
-               if rc < 0:
-                       raise ValueError(_("Could not set user in addr context for %s") % addr)
-
-               rc = semanage_context_set_role(self.sh, con, "object_r")
-               if rc < 0:
-                       raise ValueError(_("Could not set role in addr context for %s") % addr)
-
-               rc = semanage_context_set_type(self.sh, con, ctype)
-               if rc < 0:
-                       raise ValueError(_("Could not set type in addr context for %s") % addr)
-
-               if serange != "":
-                       rc = semanage_context_set_mls(self.sh, con, serange)
-                       if rc < 0:
-                               raise ValueError(_("Could not set mls fields in addr context for %s") % addr)
-
-               rc = semanage_node_set_con(self.sh, node, con)
-               if rc < 0:
-                       raise ValueError(_("Could not set addr context for %s") % addr)
-
-               rc = semanage_node_modify_local(self.sh, k, node)
-               if rc < 0:
-                       raise ValueError(_("Could not add addr %s") % addr)
-
-               semanage_context_free(con)
-               semanage_node_key_free(k)
-               semanage_node_free(node)
+		       proto = 0
+	       elif proto == "ipv6":
+		       proto = 1
+	       else:
+		      raise ValueError(_("Unknown or missing protocol"))
+
+
+	       if is_mls_enabled == 1:
+		       if serange == "":
+			       serange = "s0"
+		       else:
+			       serange = untranslate(serange)
+
+	       if ctype == "":
+		       raise ValueError(_("SELinux Type is required"))
+
+	       (rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
+	       if rc < 0:
+		       raise ValueError(_("Could not create key for %s") % addr)
+	       if rc < 0:
+		       raise ValueError(_("Could not check if addr %s is defined") % addr)
+
+	       (rc, exists) = semanage_node_exists(self.sh, k)
+	       if exists:
+		       raise ValueError(_("Addr %s already defined") % addr)
+
+	       (rc, node) = semanage_node_create(self.sh)
+	       if rc < 0:
+		       raise ValueError(_("Could not create addr for %s") % addr)
+
+	       rc = semanage_node_set_addr(self.sh, node, proto, addr)
+	       (rc, con) = semanage_context_create(self.sh)
+	       if rc < 0:
+		       raise ValueError(_("Could not create context for %s") % addr)
+
+	       rc = semanage_node_set_mask(self.sh, node, proto, mask)
+	       if rc < 0:
+		       raise ValueError(_("Could not set mask for %s") % addr)
+
+
+	       rc = semanage_context_set_user(self.sh, con, "system_u")
+	       if rc < 0:
+		       raise ValueError(_("Could not set user in addr context for %s") % addr)
+
+	       rc = semanage_context_set_role(self.sh, con, "object_r")
+	       if rc < 0:
+		       raise ValueError(_("Could not set role in addr context for %s") % addr)
+
+	       rc = semanage_context_set_type(self.sh, con, ctype)
+	       if rc < 0:
+		       raise ValueError(_("Could not set type in addr context for %s") % addr)
+
+	       if serange != "":
+		       rc = semanage_context_set_mls(self.sh, con, serange)
+		       if rc < 0:
+			       raise ValueError(_("Could not set mls fields in addr context for %s") % addr)
+
+	       rc = semanage_node_set_con(self.sh, node, con)
+	       if rc < 0:
+		       raise ValueError(_("Could not set addr context for %s") % addr)
+
+	       rc = semanage_node_modify_local(self.sh, k, node)
+	       if rc < 0:
+		       raise ValueError(_("Could not add addr %s") % addr)
+
+	       semanage_context_free(con)
+	       semanage_node_key_free(k)
+	       semanage_node_free(node)
 
        def add(self, addr, mask, proto, serange, ctype):
-                self.begin()
-                self.__add(addr, mask, proto, serange, ctype)
-                self.commit()
+		self.begin()
+		self.__add(addr, mask, proto, serange, ctype)
+		self.commit()
 
        def __modify(self, addr, mask, proto, serange, setype):
-               if addr == "":
-                       raise ValueError(_("Node Address is required"))
+	       if addr == "":
+		       raise ValueError(_("Node Address is required"))
 
-               if mask == "":
-                       raise ValueError(_("Node Netmask is required"))
-               if proto == "ipv4":
-                       proto = 0
-               elif proto == "ipv6":
-                       proto = 1
+	       if mask == "":
+		       raise ValueError(_("Node Netmask is required"))
+	       if proto == "ipv4":
+		       proto = 0
+	       elif proto == "ipv6":
+		       proto = 1
 	       else:
 		      raise ValueError(_("Unknown or missing protocol"))
 
 
-               if serange == "" and setype == "":
-                       raise ValueError(_("Requires setype or serange"))
+	       if serange == "" and setype == "":
+		       raise ValueError(_("Requires setype or serange"))
 
-               (rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
-               if rc < 0:
-                       raise ValueError(_("Could not create key for %s") % addr)
-
-               (rc, exists) = semanage_node_exists(self.sh, k)
-               if rc < 0:
-                       raise ValueError(_("Could not check if addr %s is defined") % addr)
-               if not exists:
-                       raise ValueError(_("Addr %s is not defined") % addr)
-
-               (rc, node) = semanage_node_query(self.sh, k)
-               if rc < 0:
-                       raise ValueError(_("Could not query addr %s") % addr)
-
-               con = semanage_node_get_con(node)
-
-               if serange != "":
-                       semanage_context_set_mls(self.sh, con, untranslate(serange))
-               if setype != "":
-                       semanage_context_set_type(self.sh, con, setype)
-
-               rc = semanage_node_modify_local(self.sh, k, node)
-               if rc < 0:
-                       raise ValueError(_("Could not modify addr %s") % addr)
+	       (rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
+	       if rc < 0:
+		       raise ValueError(_("Could not create key for %s") % addr)
+
+	       (rc, exists) = semanage_node_exists(self.sh, k)
+	       if rc < 0:
+		       raise ValueError(_("Could not check if addr %s is defined") % addr)
+	       if not exists:
+		       raise ValueError(_("Addr %s is not defined") % addr)
+
+	       (rc, node) = semanage_node_query(self.sh, k)
+	       if rc < 0:
+		       raise ValueError(_("Could not query addr %s") % addr)
+
+	       con = semanage_node_get_con(node)
+
+	       if serange != "":
+		       semanage_context_set_mls(self.sh, con, untranslate(serange))
+	       if setype != "":
+		       semanage_context_set_type(self.sh, con, setype)
+
+	       rc = semanage_node_modify_local(self.sh, k, node)
+	       if rc < 0:
+		       raise ValueError(_("Could not modify addr %s") % addr)
 
-               semanage_node_key_free(k)
-               semanage_node_free(node)
+	       semanage_node_key_free(k)
+	       semanage_node_free(node)
 
        def modify(self, addr, mask, proto, serange, setype):
-                self.begin()
-                self.__modify(addr, mask, proto, serange, setype)
-                self.commit()
+		self.begin()
+		self.__modify(addr, mask, proto, serange, setype)
+		self.commit()
 
        def __delete(self, addr, mask, proto):
-               if addr == "":
-                       raise ValueError(_("Node Address is required"))
+	       if addr == "":
+		       raise ValueError(_("Node Address is required"))
 
-               if mask == "":
-                       raise ValueError(_("Node Netmask is required"))
+	       if mask == "":
+		       raise ValueError(_("Node Netmask is required"))
 
 	       if proto == "ipv4":
-                       proto = 0
-               elif proto == "ipv6":
-                       proto = 1
-               else:
-                      raise ValueError(_("Unknown or missing protocol"))
-
-               (rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
-               if rc < 0:
-                       raise ValueError(_("Could not create key for %s") % addr)
-
-               (rc, exists) = semanage_node_exists(self.sh, k)
-               if rc < 0:
-                       raise ValueError(_("Could not check if addr %s is defined") % addr)
-               if not exists:
-                       raise ValueError(_("Addr %s is not defined") % addr)
-
-               (rc, exists) = semanage_node_exists_local(self.sh, k)
-               if rc < 0:
-                       raise ValueError(_("Could not check if addr %s is defined") % addr)
-               if not exists:
-                       raise ValueError(_("Addr %s is defined in policy, cannot be deleted") % addr)
-
-               rc = semanage_node_del_local(self.sh, k)
-               if rc < 0:
-                       raise ValueError(_("Could not delete addr %s") % addr)
+		       proto = 0
+	       elif proto == "ipv6":
+		       proto = 1
+	       else:
+		      raise ValueError(_("Unknown or missing protocol"))
+
+	       (rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
+	       if rc < 0:
+		       raise ValueError(_("Could not create key for %s") % addr)
+
+	       (rc, exists) = semanage_node_exists(self.sh, k)
+	       if rc < 0:
+		       raise ValueError(_("Could not check if addr %s is defined") % addr)
+	       if not exists:
+		       raise ValueError(_("Addr %s is not defined") % addr)
+
+	       (rc, exists) = semanage_node_exists_local(self.sh, k)
+	       if rc < 0:
+		       raise ValueError(_("Could not check if addr %s is defined") % addr)
+	       if not exists:
+		       raise ValueError(_("Addr %s is defined in policy, cannot be deleted") % addr)
+
+	       rc = semanage_node_del_local(self.sh, k)
+	       if rc < 0:
+		       raise ValueError(_("Could not delete addr %s") % addr)
 
-               semanage_node_key_free(k)
+	       semanage_node_key_free(k)
 
        def delete(self, addr, mask, proto):
-              self.begin()
-              self.__delete(addr, mask, proto)
-              self.commit()
+	      self.begin()
+	      self.__delete(addr, mask, proto)
+	      self.commit()
 		
        def get_all(self, locallist = 0):
-               ddict = {}
+	       ddict = {}
 	       if locallist :
 			(rc, self.ilist) = semanage_node_list_local(self.sh)
 	       else:
-	                (rc, self.ilist) = semanage_node_list(self.sh)
-               if rc < 0:
-                       raise ValueError(_("Could not list addrs"))
-
-               for node in self.ilist:
-                       con = semanage_node_get_con(node)
-                       addr = semanage_node_get_addr(self.sh, node)
-                       mask = semanage_node_get_mask(self.sh, node)
-                       proto = semanage_node_get_proto(node)
+			(rc, self.ilist) = semanage_node_list(self.sh)
+	       if rc < 0:
+		       raise ValueError(_("Could not list addrs"))
+
+	       for node in self.ilist:
+		       con = semanage_node_get_con(node)
+		       addr = semanage_node_get_addr(self.sh, node)
+		       mask = semanage_node_get_mask(self.sh, node)
+		       proto = semanage_node_get_proto(node)
 		       if proto == 0:
 				proto = "ipv4"
 		       elif proto == 1:
 				proto = "ipv6"
-                       ddict[(addr[1], mask[1], proto)] = (semanage_context_get_user(con), semanage_context_get_role(con), semanage_context_get_type(con), semanage_context_get_mls(con))
+		       ddict[(addr[1], mask[1], proto)] = (semanage_context_get_user(con), semanage_context_get_role(con), semanage_context_get_type(con), semanage_context_get_mls(con))
 
-               return ddict
+	       return ddict
 
        def list(self, heading = 1, locallist = 0):
-               if heading:
-                       print "%-18s %-18s %-5s %-5s\n" % ("IP Address", "Netmask", "Protocol", "Context")
-               ddict = self.get_all(locallist)
-               keys = ddict.keys()
-               keys.sort()
-               if is_mls_enabled:
+	       if heading:
+		       print "%-18s %-18s %-5s %-5s\n" % ("IP Address", "Netmask", "Protocol", "Context")
+	       ddict = self.get_all(locallist)
+	       keys = ddict.keys()
+	       keys.sort()
+	       if is_mls_enabled:
 			for k in keys:
 				val = ''
 				for fields in k:
 					val = val + '\t' + str(fields)
-                                print "%-18s %-18s %-5s %s:%s:%s:%s " % (k[0],k[1],k[2],ddict[k][0], ddict[k][1],ddict[k][2], translate(ddict[k][3], False))
-               else:
-                       for k in keys:
-                               print "%-18s %-18s %-5s %s:%s:%s " % (k[0],k[1],k[2],ddict[k][0], ddict[k][1],ddict[k][2])
+				print "%-18s %-18s %-5s %s:%s:%s:%s " % (k[0],k[1],k[2],ddict[k][0], ddict[k][1],ddict[k][2], translate(ddict[k][3], False))
+	       else:
+		       for k in keys:
+			       print "%-18s %-18s %-5s %s:%s:%s " % (k[0],k[1],k[2],ddict[k][0], ddict[k][1],ddict[k][2])
 
 
 class interfaceRecords(semanageRecords):
@@ -1238,9 +1238,9 @@
 		semanage_iface_free(iface)
 
 	def add(self, interface, serange, ctype):
-                self.begin()
-                self.__add(interface, serange, ctype)
-                self.commit()
+		self.begin()
+		self.__add(interface, serange, ctype)
+		self.commit()
 
 	def __modify(self, interface, serange, setype):
 		if serange == "" and setype == "":
@@ -1275,9 +1275,9 @@
 		semanage_iface_free(iface)
 
 	def modify(self, interface, serange, setype):
-                self.begin()
-                self.__modify(interface, serange, setype)
-                self.commit()
+		self.begin()
+		self.__modify(interface, serange, setype)
+		self.commit()
 
 	def __delete(self, interface):
 		(rc, k) = semanage_iface_key_create(self.sh, interface)
@@ -1303,16 +1303,16 @@
 		semanage_iface_key_free(k)
 
 	def delete(self, interface):
-                self.begin()
-                self.__delete(interface)
-                self.commit()
+		self.begin()
+		self.__delete(interface)
+		self.commit()
 		
 	def get_all(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.ilist) = semanage_iface_list_local(self.sh)
-                else:
-                       (rc, self.ilist) = semanage_iface_list(self.sh)
+		if locallist:
+		       (rc, self.ilist) = semanage_iface_list_local(self.sh)
+		else:
+		       (rc, self.ilist) = semanage_iface_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list interfaces"))
 
@@ -1339,37 +1339,37 @@
 	def __init__(self, store = ""):
 		semanageRecords.__init__(self, store)
 
-        def createcon(self, target, seuser = "system_u"):
-                (rc, con) = semanage_context_create(self.sh)
-                if rc < 0:
-                       raise ValueError(_("Could not create context for %s") % target)
+	def createcon(self, target, seuser = "system_u"):
+		(rc, con) = semanage_context_create(self.sh)
+		if rc < 0:
+		       raise ValueError(_("Could not create context for %s") % target)
 		if seuser == "":
 			seuser = "system_u"
 
-                rc = semanage_context_set_user(self.sh, con, seuser)
-                if rc < 0:
-                       raise ValueError(_("Could not set user in file context for %s") % target)
+		rc = semanage_context_set_user(self.sh, con, seuser)
+		if rc < 0:
+		       raise ValueError(_("Could not set user in file context for %s") % target)
 		
-                rc = semanage_context_set_role(self.sh, con, "object_r")
-                if rc < 0:
-                       raise ValueError(_("Could not set role in file context for %s") % target)
+		rc = semanage_context_set_role(self.sh, con, "object_r")
+		if rc < 0:
+		       raise ValueError(_("Could not set role in file context for %s") % target)
 
 		if is_mls_enabled == 1:
-                       rc = semanage_context_set_mls(self.sh, con, "s0")
-                       if rc < 0:
-                              raise ValueError(_("Could not set mls fields in file context for %s") % target)
-
-                return con
-               
-        def validate(self, target):
-               if target == "" or target.find("\n") >= 0:
-                      raise ValueError(_("Invalid file specification"))
-                      
+		       rc = semanage_context_set_mls(self.sh, con, "s0")
+		       if rc < 0:
+			      raise ValueError(_("Could not set mls fields in file context for %s") % target)
+
+		return con
+	       
+	def validate(self, target):
+	       if target == "" or target.find("\n") >= 0:
+		      raise ValueError(_("Invalid file specification"))
+		      
 	def __add(self, target, type, ftype = "", serange = "", seuser = "system_u"):
-                self.validate(target)
+		self.validate(target)
 
 		if is_mls_enabled == 1:
-                       serange = untranslate(serange)
+		       serange = untranslate(serange)
 			
 		if type == "":
 			raise ValueError(_("SELinux Type is required"))
@@ -1383,32 +1383,32 @@
 			raise ValueError(_("Could not check if file context for %s is defined") % target)
 
 		if not exists:
-                       (rc, exists) = semanage_fcontext_exists_local(self.sh, k)
-                       if rc < 0:
-                              raise ValueError(_("Could not check if file context for %s is defined") % target)
+		       (rc, exists) = semanage_fcontext_exists_local(self.sh, k)
+		       if rc < 0:
+			      raise ValueError(_("Could not check if file context for %s is defined") % target)
 
-                if exists:
-                       raise ValueError(_("File context for %s already defined") % target)
+		if exists:
+		       raise ValueError(_("File context for %s already defined") % target)
 
 		(rc, fcontext) = semanage_fcontext_create(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not create file context for %s") % target)
 		
 		rc = semanage_fcontext_set_expr(self.sh, fcontext, target)
-                if type != "<<none>>":
-                       con = self.createcon(target, seuser)
+		if type != "<<none>>":
+		       con = self.createcon(target, seuser)
 
-                       rc = semanage_context_set_type(self.sh, con, type)
-                       if rc < 0:
-                              raise ValueError(_("Could not set type in file context for %s") % target)
-
-                       if serange != "":
-                              rc = semanage_context_set_mls(self.sh, con, serange)
-                              if rc < 0:
-                                     raise ValueError(_("Could not set mls fields in file context for %s") % target)
-                       rc = semanage_fcontext_set_con(self.sh, fcontext, con)
-                       if rc < 0:
-                              raise ValueError(_("Could not set file context for %s") % target)
+		       rc = semanage_context_set_type(self.sh, con, type)
+		       if rc < 0:
+			      raise ValueError(_("Could not set type in file context for %s") % target)
+
+		       if serange != "":
+			      rc = semanage_context_set_mls(self.sh, con, serange)
+			      if rc < 0:
+				     raise ValueError(_("Could not set mls fields in file context for %s") % target)
+		       rc = semanage_fcontext_set_con(self.sh, fcontext, con)
+		       if rc < 0:
+			      raise ValueError(_("Could not set file context for %s") % target)
 
 		semanage_fcontext_set_type(fcontext, file_types[ftype])
 
@@ -1416,20 +1416,20 @@
 		if rc < 0:
 			raise ValueError(_("Could not add file context for %s") % target)
 
-                if type != "<<none>>":
-                       semanage_context_free(con)
+		if type != "<<none>>":
+		       semanage_context_free(con)
 		semanage_fcontext_key_free(k)
 		semanage_fcontext_free(fcontext)
 
 	def add(self, target, type, ftype = "", serange = "", seuser = "system_u"):
-                self.begin()
-                self.__add(target, type, ftype, serange, seuser)
-                self.commit()
+		self.begin()
+		self.__add(target, type, ftype, serange, seuser)
+		self.commit()
 
 	def __modify(self, target, setype, ftype, serange, seuser):
 		if serange == "" and setype == "" and seuser == "":
 			raise ValueError(_("Requires setype, serange or seuser"))
-                self.validate(target)
+		self.validate(target)
 
 		(rc, k) = semanage_fcontext_key_create(self.sh, target, file_types[ftype])
 		if rc < 0:
@@ -1439,38 +1439,38 @@
 		if rc < 0:
 			raise ValueError(_("Could not check if file context for %s is defined") % target)
 		if not exists:
-                       (rc, exists) = semanage_fcontext_exists_local(self.sh, k)
-                       if not exists:
-                              raise ValueError(_("File context for %s is not defined") % target)
+		       (rc, exists) = semanage_fcontext_exists_local(self.sh, k)
+		       if not exists:
+			      raise ValueError(_("File context for %s is not defined") % target)
 		
 		(rc, fcontext) = semanage_fcontext_query_local(self.sh, k)
 		if rc < 0:
-                       (rc, fcontext) = semanage_fcontext_query(self.sh, k)
-                       if rc < 0:
-                              raise ValueError(_("Could not query file context for %s") % target)
+		       (rc, fcontext) = semanage_fcontext_query(self.sh, k)
+		       if rc < 0:
+			      raise ValueError(_("Could not query file context for %s") % target)
 
-                if setype != "<<none>>":
-                       con = semanage_fcontext_get_con(fcontext)
+		if setype != "<<none>>":
+		       con = semanage_fcontext_get_con(fcontext)
 			
-                       if con == None:
-                              con = self.createcon(target)
-                              
-                       if serange != "":
-                              semanage_context_set_mls(self.sh, con, untranslate(serange))
-                       if seuser != "":
-                              semanage_context_set_user(self.sh, con, seuser)
-                              
-                       if setype != "":
-                              semanage_context_set_type(self.sh, con, setype)
-
-                       rc = semanage_fcontext_set_con(self.sh, fcontext, con)
-                       if rc < 0:
-                              raise ValueError(_("Could not set file context for %s") % target)
-                else:
-                       rc = semanage_fcontext_set_con(self.sh, fcontext, None)
-                       if rc < 0:
-                              raise ValueError(_("Could not set file context for %s") % target)
-                       
+		       if con == None:
+			      con = self.createcon(target)
+			      
+		       if serange != "":
+			      semanage_context_set_mls(self.sh, con, untranslate(serange))
+		       if seuser != "":
+			      semanage_context_set_user(self.sh, con, seuser)
+			      
+		       if setype != "":
+			      semanage_context_set_type(self.sh, con, setype)
+
+		       rc = semanage_fcontext_set_con(self.sh, fcontext, con)
+		       if rc < 0:
+			      raise ValueError(_("Could not set file context for %s") % target)
+		else:
+		       rc = semanage_fcontext_set_con(self.sh, fcontext, None)
+		       if rc < 0:
+			      raise ValueError(_("Could not set file context for %s") % target)
+		       
 		rc = semanage_fcontext_modify_local(self.sh, k, fcontext)
 		if rc < 0:
 			raise ValueError(_("Could not modify file context for %s") % target)
@@ -1479,9 +1479,9 @@
 		semanage_fcontext_free(fcontext)
 
 	def modify(self, target, setype, ftype, serange, seuser):
-                self.begin()
-                self.__modify(target, setype, ftype, serange, seuser)
-                self.commit()
+		self.begin()
+		self.__modify(target, setype, ftype, serange, seuser)
+		self.commit()
 		
 
 	def deleteall(self):
@@ -1489,22 +1489,22 @@
 		if rc < 0:
 			raise ValueError(_("Could not list the file contexts"))
 
-                self.begin()
+		self.begin()
 
 		for fcontext in flist:
-                       target = semanage_fcontext_get_expr(fcontext)
-                       ftype = semanage_fcontext_get_type(fcontext)
-                       ftype_str = semanage_fcontext_get_type_str(ftype)
-                       (rc, k) = semanage_fcontext_key_create(self.sh, target, file_types[ftype_str])
-                       if rc < 0:
-                              raise ValueError(_("Could not create a key for %s") % target)
-
-                       rc = semanage_fcontext_del_local(self.sh, k)
-                       if rc < 0:
-                              raise ValueError(_("Could not delete the file context %s") % target)
-                       semanage_fcontext_key_free(k)
+		       target = semanage_fcontext_get_expr(fcontext)
+		       ftype = semanage_fcontext_get_type(fcontext)
+		       ftype_str = semanage_fcontext_get_type_str(ftype)
+		       (rc, k) = semanage_fcontext_key_create(self.sh, target, file_types[ftype_str])
+		       if rc < 0:
+			      raise ValueError(_("Could not create a key for %s") % target)
+
+		       rc = semanage_fcontext_del_local(self.sh, k)
+		       if rc < 0:
+			      raise ValueError(_("Could not delete the file context %s") % target)
+		       semanage_fcontext_key_free(k)
 	
-                self.commit()
+		self.commit()
 
 	def __delete(self, target, ftype):
 		(rc,k) = semanage_fcontext_key_create(self.sh, target, file_types[ftype])
@@ -1530,32 +1530,32 @@
 		semanage_fcontext_key_free(k)		
 
 	def delete(self, target, ftype):
-                self.begin()
-                self.__delete( target, ftype)
-                self.commit()
+		self.begin()
+		self.__delete( target, ftype)
+		self.commit()
 
 	def get_all(self, locallist = 0):
-                if locallist:
-                       (rc, self.flist) = semanage_fcontext_list_local(self.sh)
-                else:
-                       (rc, self.flist) = semanage_fcontext_list(self.sh)
-                       if rc < 0:
-                              raise ValueError(_("Could not list file contexts"))
-
-                       (rc, fclocal) = semanage_fcontext_list_local(self.sh)
-                       if rc < 0:
-                              raise ValueError(_("Could not list local file contexts"))
+		if locallist:
+		       (rc, self.flist) = semanage_fcontext_list_local(self.sh)
+		else:
+		       (rc, self.flist) = semanage_fcontext_list(self.sh)
+		       if rc < 0:
+			      raise ValueError(_("Could not list file contexts"))
+
+		       (rc, fclocal) = semanage_fcontext_list_local(self.sh)
+		       if rc < 0:
+			      raise ValueError(_("Could not list local file contexts"))
 
-                       self.flist += fclocal
+		       self.flist += fclocal
 
-                ddict = {}
+		ddict = {}
 		for fcontext in self.flist:
 			expr = semanage_fcontext_get_expr(fcontext)
 			ftype = semanage_fcontext_get_type(fcontext)
 			ftype_str = semanage_fcontext_get_type_str(ftype)
 			con = semanage_fcontext_get_con(fcontext)
 			if con:
-                               ddict[(expr, ftype_str)] = (semanage_context_get_user(con), semanage_context_get_role(con), semanage_context_get_type(con), semanage_context_get_mls(con))
+			       ddict[(expr, ftype_str)] = (semanage_context_get_user(con), semanage_context_get_role(con), semanage_context_get_type(con), semanage_context_get_mls(con))
 			else:
 				ddict[(expr, ftype_str)] = con
 
@@ -1565,8 +1565,8 @@
 		if heading:
 			print "%-50s %-18s %s\n" % (_("SELinux fcontext"), _("type"), _("Context"))
 		fcon_dict = self.get_all(locallist)
-                keys = fcon_dict.keys()
-                keys.sort()
+		keys = fcon_dict.keys()
+		keys.sort()
 		for k in keys:
 			if fcon_dict[k]:
 				if is_mls_enabled:
@@ -1579,69 +1579,69 @@
 class booleanRecords(semanageRecords):
 	def __init__(self, store = ""):
 		semanageRecords.__init__(self, store)
-                self.dict = {}
-                self.dict["TRUE"] = 1
-                self.dict["FALSE"] = 0
-                self.dict["ON"] = 1
-                self.dict["OFF"] = 0
-                self.dict["1"] = 1
-                self.dict["0"] = 0
+		self.dict = {}
+		self.dict["TRUE"] = 1
+		self.dict["FALSE"] = 0
+		self.dict["ON"] = 1
+		self.dict["OFF"] = 0
+		self.dict["1"] = 1
+		self.dict["0"] = 0
 
 	def __mod(self, name, value):
-                (rc, k) = semanage_bool_key_create(self.sh, name)
-                if rc < 0:
-                       raise ValueError(_("Could not create a key for %s") % name)
-                (rc, exists) = semanage_bool_exists(self.sh, k)
-                if rc < 0:
-                       raise ValueError(_("Could not check if boolean %s is defined") % name)
-                if not exists:
-                       raise ValueError(_("Boolean %s is not defined") % name)	
-                
-                (rc, b) = semanage_bool_query(self.sh, k)
-                if rc < 0:
-                       raise ValueError(_("Could not query file context %s") % name)
-
-                if value.upper() in self.dict:
-                       semanage_bool_set_value(b, self.dict[value.upper()])
-                else:
-                       raise ValueError(_("You must specify one of the following values: %s") % ", ".join(self.dict.keys()) )
-                
-                rc = semanage_bool_set_active(self.sh, k, b)
-                if rc < 0:
-                       raise ValueError(_("Could not set active value of boolean %s") % name)
-                rc = semanage_bool_modify_local(self.sh, k, b)
-                if rc < 0:
-                       raise ValueError(_("Could not modify boolean %s") % name)
+		(rc, k) = semanage_bool_key_create(self.sh, name)
+		if rc < 0:
+		       raise ValueError(_("Could not create a key for %s") % name)
+		(rc, exists) = semanage_bool_exists(self.sh, k)
+		if rc < 0:
+		       raise ValueError(_("Could not check if boolean %s is defined") % name)
+		if not exists:
+		       raise ValueError(_("Boolean %s is not defined") % name)	
+		
+		(rc, b) = semanage_bool_query(self.sh, k)
+		if rc < 0:
+		       raise ValueError(_("Could not query file context %s") % name)
+
+		if value.upper() in self.dict:
+		       semanage_bool_set_value(b, self.dict[value.upper()])
+		else:
+		       raise ValueError(_("You must specify one of the following values: %s") % ", ".join(self.dict.keys()) )
+		
+		rc = semanage_bool_set_active(self.sh, k, b)
+		if rc < 0:
+		       raise ValueError(_("Could not set active value of boolean %s") % name)
+		rc = semanage_bool_modify_local(self.sh, k, b)
+		if rc < 0:
+		       raise ValueError(_("Could not modify boolean %s") % name)
 		semanage_bool_key_free(k)
 		semanage_bool_free(b)
 
 	def modify(self, name, value = None, use_file = False):
-                
-                self.begin()
+		
+		self.begin()
 
-                if use_file:
-                       fd = open(name)
-                       for b in fd.read().split("\n"):
-                              b = b.strip()
-                              if len(b) == 0:
-                                     continue
-
-                              try:
-                                     boolname, val = b.split("=")
-                              except ValueError:
-                                     raise ValueError(_("Bad format %s: Record %s" % ( name, b) ))
-                              self.__mod(boolname.strip(), val.strip())
-                       fd.close()
-                else:
-                       self.__mod(name, value)
+		if use_file:
+		       fd = open(name)
+		       for b in fd.read().split("\n"):
+			      b = b.strip()
+			      if len(b) == 0:
+				     continue
+
+			      try:
+				     boolname, val = b.split("=")
+			      except ValueError:
+				     raise ValueError(_("Bad format %s: Record %s" % ( name, b) ))
+			      self.__mod(boolname.strip(), val.strip())
+		       fd.close()
+		else:
+		       self.__mod(name, value)
 
-                self.commit()
+		self.commit()
 		
 	def __delete(self, name):
 
-                (rc, k) = semanage_bool_key_create(self.sh, name)
-                if rc < 0:
-                      raise ValueError(_("Could not create a key for %s") % name)
+		(rc, k) = semanage_bool_key_create(self.sh, name)
+		if rc < 0:
+		      raise ValueError(_("Could not create a key for %s") % name)
 		(rc, exists) = semanage_bool_exists(self.sh, k)
 		if rc < 0:
 			raise ValueError(_("Could not check if boolean %s is defined") % name)
@@ -1661,60 +1661,60 @@
 		semanage_bool_key_free(k)
 
 	def delete(self, name):
-                self.begin()
-                self.__delete(name)
-                self.commit()
+		self.begin()
+		self.__delete(name)
+		self.commit()
 
 	def deleteall(self):
 		(rc, self.blist) = semanage_bool_list_local(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list booleans"))
 
-                self.begin()
+		self.begin()
 
 		for boolean in self.blist:
-                       name = semanage_bool_get_name(boolean)
-                       self.__delete(name)
+		       name = semanage_bool_get_name(boolean)
+		       self.__delete(name)
 
-                self.commit()
+		self.commit()
 	
 	def get_all(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.blist) = semanage_bool_list_local(self.sh)
-                else:
-                       (rc, self.blist) = semanage_bool_list(self.sh)
+		if locallist:
+		       (rc, self.blist) = semanage_bool_list_local(self.sh)
+		else:
+		       (rc, self.blist) = semanage_bool_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list booleans"))
 
 		for boolean in self.blist:
-                       value = []
-                       name = semanage_bool_get_name(boolean)
-                       value.append(semanage_bool_get_value(boolean))
-                       value.append(selinux.security_get_boolean_pending(name))
-                       value.append(selinux.security_get_boolean_active(name))
-                       ddict[name] = value
+		       value = []
+		       name = semanage_bool_get_name(boolean)
+		       value.append(semanage_bool_get_value(boolean))
+		       value.append(selinux.security_get_boolean_pending(name))
+		       value.append(selinux.security_get_boolean_active(name))
+		       ddict[name] = value
 
 		return ddict
 			
-        def get_desc(self, boolean):
-               return boolean_desc(boolean)
+	def get_desc(self, boolean):
+	       return boolean_desc(boolean)
 
-        def get_category(self, boolean):
-               if boolean in booleans_dict:
-                      return _(booleans_dict[boolean][0])
-               else:
-                      return _("unknown")
+	def get_category(self, boolean):
+	       if boolean in booleans_dict:
+		      return _(booleans_dict[boolean][0])
+	       else:
+		      return _("unknown")
 
 	def list(self, heading = True, locallist = False, use_file = False):
-                on_off = (_("off"), _("on")) 
+		on_off = (_("off"), _("on")) 
 		if use_file:
-                       ddict = self.get_all(locallist)
-                       keys = ddict.keys()
-                       for k in keys:
-                              if ddict[k]:
-                                     print "%s=%s" %  (k, ddict[k][2])
-                       return
+		       ddict = self.get_all(locallist)
+		       keys = ddict.keys()
+		       for k in keys:
+			      if ddict[k]:
+				     print "%s=%s" %  (k, ddict[k][2])
+		       return
 		if heading:
 			print "%-40s %s\n" % (_("SELinux boolean"), _("Description"))
 		ddict = self.get_all(locallist)
