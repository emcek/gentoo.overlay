diff -ur policycoreutils-2.1.10.orig/audit2allow/audit2allow policycoreutils-2.1.10/audit2allow/audit2allow
--- policycoreutils-2.1.10.orig/audit2allow/audit2allow	2012-05-01 15:55:21.278022889 +0200
+++ policycoreutils-2.1.10/audit2allow/audit2allow	2012-05-01 15:57:53.988023215 +0200
@@ -133,13 +133,13 @@
         elif self.__options.audit:
             try:
                 messages = audit.get_audit_msgs()
-            except OSError, e:
+            except OSError as e:
                 sys.stderr.write('could not run ausearch - "%s"\n' % str(e))
                 sys.exit(1)
         elif self.__options.boot:
             try:
                 messages = audit.get_audit_boot_msgs()
-            except OSError, e:
+            except OSError as e:
                 sys.stderr.write('could not run ausearch - "%s"\n' % str(e))
                 sys.exit(1)
         else:
@@ -150,7 +150,7 @@
         if filename is not None:
             try:
                 f = open(filename)
-            except IOError, e:
+            except IOError as e:
                 sys.stderr.write('could not open file %s - "%s"\n' % (filename, str(e)))
                 sys.exit(1)
 
@@ -212,7 +212,7 @@
 
         try:
             fd = open(filename, "w")
-        except IOError, e:
+        except IOError as e:
             sys.stderr.write("could not write output file: %s\n" % str(e))
             sys.exit(1)
 
@@ -223,8 +223,8 @@
 
         try:
             mc.create_module_package(filename, self.__options.refpolicy)
-        except RuntimeError, e:
-            print e
+        except RuntimeError as e:
+            print(e)
             sys.exit(1)
 
         sys.stdout.write(_("******************** IMPORTANT ***********************\n"))
@@ -238,43 +238,43 @@
                 rc = i.type
                 bools = i.bools
                 if rc >= 0:
-                    print "%s\n\tWas caused by:" % i.message
+                    print("%s\n\tWas caused by:" % i.message)
                 if rc == audit2why.ALLOW:
-                    print "\t\tUnknown - would be allowed by active policy\n",
-                    print "\t\tPossible mismatch between this policy and the one under which the audit message was generated.\n"
-                    print "\t\tPossible mismatch between current in-memory boolean settings vs. permanent ones.\n"
+                    print("\t\tUnknown - would be allowed by active policy\n", end=' ')
+                    print("\t\tPossible mismatch between this policy and the one under which the audit message was generated.\n")
+                    print("\t\tPossible mismatch between current in-memory boolean settings vs. permanent ones.\n")
                     continue
                 if rc == audit2why.DONTAUDIT:
-                    print "\t\tUnknown - should be dontaudit'd by active policy\n",
-                    print "\t\tPossible mismatch between this policy and the one under which the audit message was generated.\n"
-                    print "\t\tPossible mismatch between current in-memory boolean settings vs. permanent ones.\n"
+                    print("\t\tUnknown - should be dontaudit'd by active policy\n", end=' ')
+                    print("\t\tPossible mismatch between this policy and the one under which the audit message was generated.\n")
+                    print("\t\tPossible mismatch between current in-memory boolean settings vs. permanent ones.\n")
                     continue
                 if rc == audit2why.BOOLEAN:
                     if len(bools) > 1:
-                        print "\tOne of the following booleans was set incorrectly."
+                        print("\tOne of the following booleans was set incorrectly.")
                         for b in bools:
-                            print "\tDescription:\n\t%s\n"  % seobject.boolean_desc(b[0])
-                            print "\tAllow access by executing:\n\t# setsebool -P %s %d"  % (b[0], b[1])
+                            print("\tDescription:\n\t%s\n"  % seobject.boolean_desc(b[0]))
+                            print("\tAllow access by executing:\n\t# setsebool -P %s %d"  % (b[0], b[1]))
                     else:
-                        print "\tThe boolean %s was set incorrectly. " % (bools[0][0])
-                        print "\tDescription:\n\t%s\n"  % seobject.boolean_desc(bools[0][0])
-                        print "\tAllow access by executing:\n\t# setsebool -P %s %d"  % (bools[0][0], bools[0][1])
+                        print("\tThe boolean %s was set incorrectly. " % (bools[0][0]))
+                        print("\tDescription:\n\t%s\n"  % seobject.boolean_desc(bools[0][0]))
+                        print("\tAllow access by executing:\n\t# setsebool -P %s %d"  % (bools[0][0], bools[0][1]))
                     continue
 
                 if rc == audit2why.TERULE:
-                    print "\t\tMissing type enforcement (TE) allow rule.\n"
-                    print "\t\tYou can use audit2allow to generate a loadable module to allow this access.\n"
+                    print("\t\tMissing type enforcement (TE) allow rule.\n")
+                    print("\t\tYou can use audit2allow to generate a loadable module to allow this access.\n")
                     continue
 
                 if rc == audit2why.CONSTRAINT:
-                    print "\t\tPolicy constraint violation.\n"
-                    print "\t\tMay require adding a type attribute to the domain or type to satisfy the constraint.\n"
-                    print "\t\tConstraints are defined in the policy sources in policy/constraints (general), policy/mcs (MCS), and policy/mls (MLS).\n"
+                    print("\t\tPolicy constraint violation.\n")
+                    print("\t\tMay require adding a type attribute to the domain or type to satisfy the constraint.\n")
+                    print("\t\tConstraints are defined in the policy sources in policy/constraints (general), policy/mcs (MCS), and policy/mls (MLS).\n")
                     continue
 
                 if rc == audit2why.RBAC:
-                    print "\t\tMissing role allow rule.\n"
-                    print "\t\tAdd an allow rule for the role pair.\n"
+                    print("\t\tMissing role allow rule.\n")
+                    print("\t\tAdd an allow rule for the role pair.\n")
                     continue
 
             audit2why.finish()
@@ -285,8 +285,8 @@
         if self.__options.audit2why:
             try:
                 return self.__output_audit2why()
-            except RuntimeError, e:
-                print e
+            except RuntimeError as e:
+                print(e)
                 sys.exit(1)
 
         g = policygen.PolicyGenerator()
@@ -345,8 +345,8 @@
             self.__output()
         except KeyboardInterrupt:
             sys.exit(0)
-        except ValueError, e:
-            print e
+        except ValueError as e:
+            print(e)
             sys.exit(1)
 
 if __name__ == "__main__":
diff -ur policycoreutils-2.1.10.orig/scripts/chcat policycoreutils-2.1.10/scripts/chcat
--- policycoreutils-2.1.10.orig/scripts/chcat	2012-05-01 15:55:21.283022889 +0200
+++ policycoreutils-2.1.10/scripts/chcat	2012-05-01 15:58:37.789023308 +0200
@@ -22,15 +22,15 @@
 #                                        02111-1307  USA
 #
 #  
-import commands, sys, os, pwd, string, getopt, selinux
+import subprocess, sys, os, pwd, string, getopt, selinux
 import seobject
 import gettext
 
 try:
     gettext.install('policycoreutils')
 except IOError:
-       import __builtin__
-       __builtin__.__dict__['_'] = unicode
+       import builtins
+       builtins.__dict__['_'] = str
 
 def errorExit(error):
     sys.stderr.write("%s: " % sys.argv[0])
@@ -52,7 +52,7 @@
     add_ind = 0
     verify_users(users)
     for u in users:
-        if u in seusers.keys():
+        if u in list(seusers.keys()):
             user = seusers[u]
         else:
             add_ind = 1
@@ -80,9 +80,9 @@
             cmd = "semanage login -a -r %s -s %s %s" % (new_serange, user[0], u)
         else:
             cmd = "semanage login -m -r %s -s %s %s" % (new_serange, user[0], u)
-        rc = commands.getstatusoutput(cmd)
+        rc = subprocess.getstatusoutput(cmd)
         if rc[0] != 0:
-            print rc[1]
+            print(rc[1])
             errors += 1
 
     return errors
@@ -103,11 +103,11 @@
         con = c.split(":")[3:]
         clist  =  translate(con)
         if sensitivity != clist[0]:
-                print(_("Can not modify sensitivity levels using '+' on %s") % f)
+                print((_("Can not modify sensitivity levels using '+' on %s") % f))
 
         if len(clist) > 1:
             if cat in clist[1:]:
-                print _("%s is already in %s") % (f, orig)
+                print(_("%s is already in %s") % (f, orig))
                 continue
             clist.append(cat)
             cats = clist[1:]
@@ -118,9 +118,9 @@
         else:
             cat_string = cat
         cmd = 'chcon -l %s:%s %s' % (sensitivity, cat_string, f)
-        rc = commands.getstatusoutput(cmd)
+        rc = subprocess.getstatusoutput(cmd)
         if rc[0] != 0:
-            print rc[1]
+            print(rc[1])
             errors += 1
     return errors
 
@@ -131,7 +131,7 @@
     add_ind = 0
     verify_users(users)
     for u in users:
-        if u in seusers.keys():
+        if u in list(seusers.keys()):
             user = seusers[u]
         else:
             add_ind = 1
@@ -158,9 +158,9 @@
             cmd = "semanage login -a -r %s -s %s %s" % (new_serange, user[0], u)
         else:
             cmd = "semanage login -m -r %s -s %s %s" % (new_serange, user[0], u)
-        rc = commands.getstatusoutput(cmd)
+        rc = subprocess.getstatusoutput(cmd)
         if rc[0] != 0:
-            print rc[1]
+            print(rc[1])
             errors += 1
     return errors
         
@@ -180,12 +180,12 @@
         con = c.split(":")[3:]
         clist = translate(con)
         if sensitivity != clist[0]:
-                print(_("Can not modify sensitivity levels using '+' on %s") % f)
+                print((_("Can not modify sensitivity levels using '+' on %s") % f))
                 continue
             
         if len(clist) > 1:
             if cat not in clist[1:]:
-                print _("%s is not in %s") % (f, orig)
+                print(_("%s is not in %s") % (f, orig))
                 continue
             clist.remove(cat)
             if len(clist) > 1:
@@ -195,16 +195,16 @@
             else:
                 cat = ""
         else:
-                print _("%s is not in %s") % (f, orig)
+                print(_("%s is not in %s") % (f, orig))
                 continue
         
         if len(cat) == 0: 
             cmd = 'chcon -l %s %s' % (sensitivity, f)
         else:
             cmd = 'chcon -l %s:%s %s' % (sensitivity,cat, f)
-        rc = commands.getstatusoutput(cmd)
+        rc = subprocess.getstatusoutput(cmd)
         if rc[0] != 0:
-            print rc[1]
+            print(rc[1])
             errors += 1
     return errors
 
@@ -215,7 +215,7 @@
     add_ind = 0
     verify_users(users)
     for u in users:
-        if u in seusers.keys():
+        if u in list(seusers.keys()):
             user = seusers[u]
         else:
             add_ind = 1
@@ -229,9 +229,9 @@
             cmd = "semanage login -a -r %s -s %s %s" % (new_serange, user[0], u)
         else:
             cmd = "semanage login -m -r %s -s %s %s" % (new_serange, user[0], u)
-        rc = commands.getstatusoutput(cmd)
+        rc = subprocess.getstatusoutput(cmd)
         if rc[0] != 0:
-            print rc[1]
+            print(rc[1])
             errors += 1
     return errors
     
@@ -251,9 +251,9 @@
     for f in objects:
         cmd = "%s %s" % (cmd, f)
 
-    rc = commands.getstatusoutput(cmd)
+    rc = subprocess.getstatusoutput(cmd)
     if rc[0] != 0:
-        print rc[1]
+        print(rc[1])
         errors += 1
 
     return errors
@@ -322,17 +322,17 @@
     return newcat
     
 def usage():
-	print _("Usage %s CATEGORY File ...") % sys.argv[0]
-	print _("Usage %s -l CATEGORY user ...") % sys.argv[0]
-	print _("Usage %s [[+|-]CATEGORY],...]q File ...") % sys.argv[0]
-	print _("Usage %s -l [[+|-]CATEGORY],...]q user ...") % sys.argv[0]
-	print _("Usage %s -d File ...") % sys.argv[0]
-	print _("Usage %s -l -d user ...") % sys.argv[0]
-	print _("Usage %s -L") % sys.argv[0]
-	print _("Usage %s -L -l user") % sys.argv[0]
-        print _("Use -- to end option list.  For example")
-        print _("chcat -- -CompanyConfidential /docs/businessplan.odt")
-        print _("chcat -l +CompanyConfidential juser")
+	print(_("Usage %s CATEGORY File ...") % sys.argv[0])
+	print(_("Usage %s -l CATEGORY user ...") % sys.argv[0])
+	print(_("Usage %s [[+|-]CATEGORY],...]q File ...") % sys.argv[0])
+	print(_("Usage %s -l [[+|-]CATEGORY],...]q user ...") % sys.argv[0])
+	print(_("Usage %s -d File ...") % sys.argv[0])
+	print(_("Usage %s -l -d user ...") % sys.argv[0])
+	print(_("Usage %s -L") % sys.argv[0])
+	print(_("Usage %s -L -l user") % sys.argv[0])
+        print(_("Use -- to end option list.  For example"))
+        print(_("chcat -- -CompanyConfidential /docs/businessplan.odt"))
+        print(_("chcat -l +CompanyConfidential juser"))
 	sys.exit(1)
 
 def listcats():
@@ -342,7 +342,7 @@
             continue
         if l.find("=") != -1:
             rec = l.split("=")
-            print "%-30s %s" % tuple(rec)
+            print("%-30s %s" % tuple(rec))
     fd.close()
     return 0
     
@@ -356,12 +356,12 @@
         cats = seobject.translate(selinux.getseuserbyname(u)[2])
         cats = cats.split("-")
         if len(cats) > 1 and cats[1] != "s0":
-            print "%s: %s" % (u, cats[1])
+            print("%s: %s" % (u, cats[1]))
         else:
-            print "%s: %s" % (u, cats[0])
+            print("%s: %s" % (u, cats[0]))
             
 def error(msg):
-    print "%s: %s" % (sys.argv[0], msg)
+    print("%s: %s" % (sys.argv[0], msg))
     sys.exit(1)
     
 if __name__ == '__main__':
@@ -395,10 +395,10 @@
         if list_ind == 0 and len(cmds) < 1:
             usage()
 
-    except getopt.error, error:
+    except getopt.error as error:
         errorExit(_("Options Error %s ") % error.msg)
 
-    except ValueError, e:
+    except ValueError as e:
         usage()
 
     if delete_ind:
@@ -433,9 +433,9 @@
                 if len(c) > 0 and c[0] == "-":
                     errors += chcat_remove(c[1:],translate(l), objects, login_ind)
                     continue
-    except ValueError, e:
+    except ValueError as e:
         error(e)
-    except OSError, e:
+    except OSError as e:
         error(e)
     
     sys.exit(errors)
diff -ur policycoreutils-2.1.10.orig/semanage/semanage policycoreutils-2.1.10/semanage/semanage
--- policycoreutils-2.1.10.orig/semanage/semanage	2012-05-01 15:55:21.320022889 +0200
+++ policycoreutils-2.1.10/semanage/semanage	2012-05-01 16:45:06.383029260 +0200
@@ -16,8 +16,8 @@
 #
 #    You should have received a copy of the GNU General Public License
 #    along with this program; if not, write to the Free Software
-#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA     
-#                                        02111-1307  USA
+#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA	
+#					02111-1307  USA
 #
 #  
 import sys, getopt, re
@@ -29,14 +29,9 @@
 gettext.bindtextdomain(PROGNAME, "/usr/share/locale")
 gettext.textdomain(PROGNAME)
 
-try:
-       gettext.install(PROGNAME,
-                       localedir="/usr/share/locale",
-                       unicode=False,
-                       codeset = 'utf-8')
-except IOError:
-       import __builtin__
-       __builtin__.__dict__['_'] = unicode
+gettext.install(PROGNAME,
+		localedir="/usr/share/locale",
+		codeset = 'utf-8')
 
 if __name__ == '__main__':
 	manageditems=[ "boolean", "login", "user", "port", "interface", "node", "fcontext"]
@@ -48,7 +43,7 @@
 		action = True
 
 	def usage(message = ""):
-               text = _("""
+		text = _("""
 semanage [ -S store ] -i [ input_file | - ]
 semanage [ -S store ] -o [ output_file | - ]
 
@@ -65,23 +60,23 @@
 
 Primary Options:
 
-	-a, --add        Add a OBJECT record NAME
-	-d, --delete     Delete a OBJECT record NAME
-	-m, --modify     Modify a OBJECT record NAME
-        -i, --input      Input multiple semange commands in a transaction 
-	-o, --output     Output current customizations as semange commands
-	-l, --list       List the OBJECTS
+	-a, --add	Add a OBJECT record NAME
+	-d, --delete	Delete a OBJECT record NAME
+	-m, --modify	Modify a OBJECT record NAME
+	-i, --input	Input multiple semange commands in a transaction 
+	-o, --output	Output current customizations as semange commands
+	-l, --list	List the OBJECTS
 	-E, --extract    extract customizable commands
 	-C, --locallist  List OBJECTS local customizations
 	-D, --deleteall  Remove all OBJECTS local customizations
 
-	-h, --help       Display this message
+	-h, --help	Display this message
 	-n, --noheading  Do not print heading when listing OBJECTS
-        -S, --store      Select and alternate SELinux store to manage
+	-S, --store	Select and alternate SELinux store to manage
 
 Object-specific Options (see above):
 
-	-f, --ftype      File Type of OBJECT 
+	-f, --ftype	File Type of OBJECT 
 		"" (all files) 
 		-- (regular file) 
 		-d (directory) 
@@ -91,20 +86,20 @@
 		-l (symbolic link) 
 		-p (named pipe) 
 
-        -F, --file       Treat target as an input file for command, change multiple settings
-	-p, --proto      Port protocol (tcp or udp) or internet protocol version of node (ipv4 or ipv6)
-	-M, --mask       Netmask
-	-e, --equal      Substitue source path for dest path when labeling
-	-P, --prefix     Prefix for home directory labeling
-	-L, --level      Default SELinux Level (MLS/MCS Systems only)
-	-R, --roles      SELinux Roles (ex: "sysadm_r staff_r")
-	-s, --seuser     SELinux User Name
-	-t, --type       SELinux Type for the object
-	-r, --range      MLS/MCS Security Range (MLS/MCS Systems only)
-	--enable         Enable a module
-	--disable        Disable a module
+	-F, --file	Treat target as an input file for command, change multiple settings
+	-p, --proto	Port protocol (tcp or udp) or internet protocol version of node (ipv4 or ipv6)
+	-M, --mask	Netmask
+	-e, --equal	Substitue source path for dest path when labeling
+	-P, --prefix	Prefix for home directory labeling
+	-L, --level	Default SELinux Level (MLS/MCS Systems only)
+	-R, --roles	SELinux Roles (ex: "sysadm_r staff_r")
+	-s, --seuser	SELinux User Name
+	-t, --type	SELinux Type for the object
+	-r, --range	MLS/MCS Security Range (MLS/MCS Systems only)
+	--enable	 Enable a module
+	--disable	Disable a module
 """)
-               raise ValueError("%s\n%s" % (text, message))
+		raise ValueError("%s\n%s" % (text, message))
 		
 	def errorExit(error):
 		sys.stderr.write("%s: " % sys.argv[0])
@@ -137,53 +132,53 @@
 		valid_option["permissive"] += [ '-a', '--add', '-d', '--delete', '-l', '--list', '-h', '--help', '-n', '--noheading', '-D', '--deleteall' ]
 		return valid_option
 
-        def mkargv(line):
-               dquote = "\""
-               squote = "\'"
-               l = line.split()
-               ret = []
-               i = 0
-               while i < len(l):
-                      cnt = len(re.findall(dquote, l[i]))
-                      if cnt > 1:
-                             ret.append(l[i].strip(dquote))
-                             i = i + 1
-                             continue
-                      if cnt == 1:
-                             quote = [ l[i].strip(dquote) ]
-                             i = i + 1
-                             
-                             while i < len(l) and  dquote not in l[i]:
-                                    quote.append(l[i])
-                                    i = i + 1
-                             quote.append(l[i].strip(dquote))
-                             ret.append(" ".join(quote))
-                             i = i + 1
-                             continue
-
-                      cnt = len(re.findall(squote, l[i]))
-                      if cnt > 1:
-                             ret.append(l[i].strip(squote))
-                             i = i + 1
-                             continue
-                      if cnt == 1:
-                             quote = [ l[i].strip(squote) ]
-                             i = i + 1
-                             while i < len(l) and  squote not in l[i]:
-                                    quote.append(l[i])
-                                    i = i + 1
-
-                             quote.append(l[i].strip(squote))
-                             ret.append(" ".join(quote))
-                             i = i + 1
-                             continue
+	def mkargv(line):
+		dquote = "\""
+		squote = "\'"
+		l = line.split()
+		ret = []
+		i = 0
+		while i < len(l):
+			cnt = len(re.findall(dquote, l[i]))
+			if cnt > 1:
+				ret.append(l[i].strip(dquote))
+				i = i + 1
+				continue
+			if cnt == 1:
+				quote = [ l[i].strip(dquote) ]
+				i = i + 1
+				
+				while i < len(l) and  dquote not in l[i]:
+					quote.append(l[i])
+					i = i + 1
+				quote.append(l[i].strip(dquote))
+				ret.append(" ".join(quote))
+				i = i + 1
+				continue
+
+			cnt = len(re.findall(squote, l[i]))
+			if cnt > 1:
+				ret.append(l[i].strip(squote))
+				i = i + 1
+				continue
+			if cnt == 1:
+				quote = [ l[i].strip(squote) ]
+				i = i + 1
+				while i < len(l) and  squote not in l[i]:
+					quote.append(l[i])
+					i = i + 1
+
+				quote.append(l[i].strip(squote))
+				ret.append(" ".join(quote))
+				i = i + 1
+				continue
 
-                      ret.append(l[i])
-                      i = i + 1
+			ret.append(l[i])
+			i = i + 1
 
-               return ret
+		return ret
 
-        def process_args(argv):
+	def process_args(argv):
 		global action
 		action = False
 		serange = ""
@@ -208,7 +203,7 @@
 		list = False
 		locallist = False
 		use_file = False
-                store = ""
+		store = ""
 		equal = ""
 
 		if len(argv) == 0:
@@ -224,34 +219,34 @@
 			gopts, cmds = getopt.getopt(args,
 						    '01adEe:f:i:lhmnp:s:FCDR:L:r:t:P:S:M:',
 						    ['add',
-						     'delete',
-						     'deleteall',
-						     'enable',
-						     'equal=',
-						     'extract',
-						     'disable',
-						     'ftype=',
-						     'file',
-						     'help',
-						     'input=',
-						     'list',
-						     'modify',
-						     'noheading',
-						     'localist',
-						     'off',
-						     'on',
-						     'proto=',
-						     'seuser=',
-						     'store=',
-						     'range=',
-						     'locallist=',
-						     'level=',
-						     'roles=',
-						     'type=',
-						     'prefix=',
-						     'mask='
-						     ])
-		except getopt.error, error:
+							'delete',
+							'deleteall',
+							'enable',
+							'equal=',
+							'extract',
+							'disable',
+							'ftype=',
+							'file',
+							'help',
+							'input=',
+							'list',
+							'modify',
+							'noheading',
+							'localist',
+							'off',
+							'on',
+							'proto=',
+							'seuser=',
+							'store=',
+							'range=',
+							'locallist=',
+							'level=',
+							'roles=',
+							'type=',
+							'prefix=',
+							'mask='
+							])
+		except getopt.error as error:
 			usage(_("Options Error %s ") % error.msg)
 
 		for o, a in gopts:
@@ -375,30 +370,30 @@
 		
 		if list:
 			if object == "boolean":
-                               OBJECT.list(heading, locallist, use_file)
+				OBJECT.list(heading, locallist, use_file)
 			else:
-                               OBJECT.list(heading, locallist)
-                        return
+				OBJECT.list(heading, locallist)
+			return
 			
 		if deleteall:
 			OBJECT.deleteall()
-                        return
+			return
 			
 		if extract:
 			for i in OBJECT.customized():
-				print "%s %s" % (object, str(i))
+				print("%s %s" % (object, str(i)))
 			return
 
 		if len(cmds) != 1:
-                       raise ValueError(_("bad option"))
-                        
-                target = cmds[0]
+			raise ValueError(_("bad option"))
+			
+		target = cmds[0]
 
 		if object == "dontaudit":
-                       OBJECT = seobject.dontauditClass(store)
-                       OBJECT.toggle(target)
-                       return
-                              
+			OBJECT = seobject.dontauditClass(store)
+			OBJECT.toggle(target)
+			return
+				
 		if add:
 			if object == "login":
 				OBJECT.add(target, seuser, serange)
@@ -489,84 +484,84 @@
 
 			else:
 				OBJECT.delete(target)
-                        return
+			return
 
-                raise ValueError(_("Invalid command: semanage %s") % " ".join(argv))
+		raise ValueError(_("Invalid command: semanage %s") % " ".join(argv))
 
 	#
 	# 
 	#
 	try:
-               output = None
-               input = None
-               store = ""
-
-               if len(sys.argv) < 3:
-                      usage(_("Requires 2 or more arguments"))
-                
-               gopts, cmds = getopt.getopt(sys.argv[1:],
-                                           '01adf:i:lhmno:p:s:FCDR:L:r:t:P:S:',
-                                           ['add',
-                                            'delete',
-                                            'deleteall',
-                                            'ftype=',
-                                            'file',
-                                            'help',
-                                            'input=',
-                                            'list', 
-                                            'modify',
-                                            'noheading',
-                                            'localist',
-                                            'off', 
-                                            'on', 
-                                            'output=',
-                                            'proto=',
-                                            'seuser=',
-                                            'store=',
-                                            'range=',
-                                            'level=',
-                                            'roles=',
-                                            'type=',
-                                            'prefix='
-                                            ])
-               for o, a in gopts:
-                      if o == "-S" or o == '--store':
-                             store = a
-                      if o == "-i" or o == '--input':
-                             input = a
-                      if o == "-o" or o == '--output':
-                             output = a
-
-               if output != None:
-                      if output != "-":
-                             sys.stdout = open(output, 'w')
-                      for i in manageditems:
-                             print "%s -D" % i
-                             process_args([i, "-E"])
-                      sys.exit(0)
-
-               if input != None:
-                      if input == "-":
-                             fd = sys.stdin
-                      else:
-                             fd = open(input, 'r')
-                      trans = seobject.semanageRecords(store)
-                      trans.start()
-                      for l in fd.readlines():
-                             process_args(mkargv(l))
-                      trans.finish()
-               else:
-                      process_args(sys.argv[1:])
+		output = None
+		input = None
+		store = ""
+
+		if len(sys.argv) < 3:
+			usage(_("Requires 2 or more arguments"))
+		
+		gopts, cmds = getopt.getopt(sys.argv[1:],
+					   '01adf:i:lhmno:p:s:FCDR:L:r:t:P:S:',
+					   ['add',
+					    'delete',
+					    'deleteall',
+					    'ftype=',
+					    'file',
+					    'help',
+					    'input=',
+					    'list', 
+					    'modify',
+					    'noheading',
+					    'localist',
+					    'off', 
+					    'on', 
+					    'output=',
+					    'proto=',
+					    'seuser=',
+					    'store=',
+					    'range=',
+					    'level=',
+					    'roles=',
+					    'type=',
+					    'prefix='
+					    ])
+		for o, a in gopts:
+			if o == "-S" or o == '--store':
+				store = a
+			if o == "-i" or o == '--input':
+				input = a
+			if o == "-o" or o == '--output':
+				output = a
+
+		if output != None:
+			if output != "-":
+				sys.stdout = open(output, 'w')
+			for i in manageditems:
+				print("%s -D" % i)
+				process_args([i, "-E"])
+			sys.exit(0)
+
+		if input != None:
+			if input == "-":
+				fd = sys.stdin
+			else:
+				fd = open(input, 'r')
+			trans = seobject.semanageRecords(store)
+			trans.start()
+			for l in fd.readlines():
+				process_args(mkargv(l))
+			trans.finish()
+		else:
+			process_args(sys.argv[1:])
 			
-	except getopt.error, error:
+	except getopt.error as error:
 		usage(_("Options Error %s ") % error.msg)
-	except ValueError, error:
+	except ValueError as error:
 		errorExit(error.args[0])
-	except KeyError, error:
+	except KeyError as error:
 		errorExit(_("Invalid value %s") % error.args[0])
-	except IOError, error:
+	except IOError as error:
 		errorExit(error.args[1])
-	except OSError, error:
+	except OSError as error:
 		errorExit(error.args[1])
-	except RuntimeError, error:
+	except RuntimeError as error:
 		errorExit(error.args[0])
diff -ur policycoreutils-2.1.10.orig/semanage/seobject.py policycoreutils-2.1.10/semanage/seobject.py
--- policycoreutils-2.1.10.orig/semanage/seobject.py	2012-05-01 15:55:21.320022889 +0200
+++ policycoreutils-2.1.10/semanage/seobject.py	2012-05-01 16:48:17.943029670 +0200
@@ -16,8 +16,8 @@
 #
 #    You should have received a copy of the GNU General Public License
 #    along with this program; if not, write to the Free Software
-#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA     
-#                                        02111-1307  USA
+#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA	
+#					02111-1307  USA
 #
 #  
 
@@ -30,11 +30,7 @@
 import gettext
 gettext.bindtextdomain(PROGNAME, "/usr/share/locale")
 gettext.textdomain(PROGNAME)
-try:
-       gettext.install(PROGNAME, localedir = "/usr/share/locale", unicode = 1)
-except IOError:
-       import __builtin__
-       __builtin__.__dict__['_'] = unicode
+gettext.install(PROGNAME, localedir = "/usr/share/locale")
 
 import syslog
 
@@ -92,34 +88,34 @@
 
 booleans_dict = {}
 try:
-       tree = xml.etree.ElementTree.parse("/usr/share/selinux/devel/policy.xml")
-       for l in  tree.findall("layer"):
-              for m in  l.findall("module"):
-                     for b in  m.findall("tunable"):
-                            desc = b.find("desc").find("p").text.strip("\n")
-                            desc = re.sub("\n", " ", desc)
-                            booleans_dict[b.get('name')] = (m.get("name"), b.get('dftval'), desc)
-                     for b in  m.findall("bool"):
-                            desc = b.find("desc").find("p").text.strip("\n")
-                            desc = re.sub("\n", " ", desc)
-                            booleans_dict[b.get('name')] = (m.get("name"), b.get('dftval'), desc)
-              for i in  tree.findall("bool"):
-                     desc = i.find("desc").find("p").text.strip("\n")
-                     desc = re.sub("\n", " ", desc)
-                     booleans_dict[i.get('name')] = (_("global"), i.get('dftval'), desc)
-       for i in  tree.findall("tunable"):
-              desc = i.find("desc").find("p").text.strip("\n")
-              desc = re.sub("\n", " ", desc)
-              booleans_dict[i.get('name')] = (_("global"), i.get('dftval'), desc)
-except IOError, e:
-       #print _("Failed to translate booleans.\n%s") % e
-       pass
+	tree = xml.etree.ElementTree.parse("/usr/share/selinux/devel/policy.xml")
+	for l in  tree.findall("layer"):
+		for m in  l.findall("module"):
+			for b in  m.findall("tunable"):
+				desc = b.find("desc").find("p").text.strip("\n")
+				desc = re.sub("\n", " ", desc)
+				booleans_dict[b.get('name')] = (m.get("name"), b.get('dftval'), desc)
+			for b in  m.findall("bool"):
+				desc = b.find("desc").find("p").text.strip("\n")
+				desc = re.sub("\n", " ", desc)
+				booleans_dict[b.get('name')] = (m.get("name"), b.get('dftval'), desc)
+		for i in  tree.findall("bool"):
+			desc = i.find("desc").find("p").text.strip("\n")
+			desc = re.sub("\n", " ", desc)
+			booleans_dict[i.get('name')] = (_("global"), i.get('dftval'), desc)
+	for i in  tree.findall("tunable"):
+		desc = i.find("desc").find("p").text.strip("\n")
+		desc = re.sub("\n", " ", desc)
+		booleans_dict[i.get('name')] = (_("global"), i.get('dftval'), desc)
+except IOError as e:
+	#print _("Failed to translate booleans.\n%s") % e
+	pass
 
 def boolean_desc(boolean):
-       if boolean in booleans_dict:
-              return _(booleans_dict[boolean][2])
-       else:
-              return boolean
+	if boolean in booleans_dict:
+		return _(booleans_dict[boolean][2])
+	else:
+		return boolean
 
 def validate_level(raw):
 	sensitivity = "s[0-9]*"
@@ -130,8 +126,8 @@
 	return re.search("^" + reg +"$", raw)
 
 def translate(raw, prepend = 1):
-        filler = "a:b:c:"
-        if prepend == 1:
+	filler = "a:b:c:"
+	if prepend == 1:
 		context = "%s%s" % (filler, raw)
 	else:
 		context = raw
@@ -146,8 +142,8 @@
 		return trans
 	
 def untranslate(trans, prepend = 1):
-        filler = "a:b:c:"
- 	if prepend == 1:
+	filler = "a:b:c:"
+	if prepend == 1:
 		context = "%s%s" % (filler, trans)
 	else:
 		context = trans
@@ -163,95 +159,94 @@
 		return raw
 
 class semanageRecords:
-        transaction = False
-        handle = None
-        store = None
-        def __init__(self, store):
-               global handle
-                      
-               self.sh = self.get_handle(store)
-
-        def get_handle(self, store):
-               global is_mls_enabled
-
-               if semanageRecords.handle:
-                      return semanageRecords.handle
-
-               handle = semanage_handle_create()
-               if not handle:
-                      raise ValueError(_("Could not create semanage handle"))
-
-               if not semanageRecords.transaction and store != "":
-                      semanage_select_store(handle, store, SEMANAGE_CON_DIRECT);
-                      semanageRecords.store = store
-
-               if not semanage_is_managed(handle):
-                      semanage_handle_destroy(handle)
-                      raise ValueError(_("SELinux policy is not managed or store cannot be accessed."))
-
-               rc = semanage_access_check(handle)
-               if rc < SEMANAGE_CAN_READ:
-                      semanage_handle_destroy(handle)
-                      raise ValueError(_("Cannot read policy store."))
-
-               rc = semanage_connect(handle)
-               if rc < 0:
-                      semanage_handle_destroy(handle)
-                      raise ValueError(_("Could not establish semanage connection"))
-
-               is_mls_enabled = semanage_mls_enabled(handle)
-               if is_mls_enabled < 0:
-                      semanage_handle_destroy(handle)
-                      raise ValueError(_("Could not test MLS enabled status"))
-
-               semanageRecords.handle = handle
-               return semanageRecords.handle
-
-        def deleteall(self):
-               raise ValueError(_("Not yet implemented"))
-
-        def start(self):
-               if semanageRecords.transaction:
-                      raise ValueError(_("Semanage transaction already in progress"))
-               self.begin()
-               semanageRecords.transaction = True
-
-        def begin(self):
-               if semanageRecords.transaction:
-                      return
-               rc = semanage_begin_transaction(self.sh)
-               if rc < 0:
-                      raise ValueError(_("Could not start semanage transaction"))
-        def customized(self):
-               raise ValueError(_("Not yet implemented"))
-
-        def commit(self):
-               if semanageRecords.transaction:
-                      return
-               rc = semanage_commit(self.sh) 
-               if rc < 0:
-                      raise ValueError(_("Could not commit semanage transaction"))
-
-        def finish(self):
-               if not semanageRecords.transaction:
-                      raise ValueError(_("Semanage transaction not in progress"))
-               semanageRecords.transaction = False
-               self.commit()
+	transaction = False
+	handle = None
+	store = None
+	def __init__(self, store):
+		global handle
+		self.sh = self.get_handle(store)
+
+	def get_handle(self, store):
+		global is_mls_enabled
+
+		if semanageRecords.handle:
+			return semanageRecords.handle
+
+		handle = semanage_handle_create()
+		if not handle:
+			raise ValueError(_("Could not create semanage handle"))
+
+		if not semanageRecords.transaction and store != "":
+			semanage_select_store(handle, store, SEMANAGE_CON_DIRECT);
+			semanageRecords.store = store
+
+		if not semanage_is_managed(handle):
+			semanage_handle_destroy(handle)
+			raise ValueError(_("SELinux policy is not managed or store cannot be accessed."))
+
+		rc = semanage_access_check(handle)
+		if rc < SEMANAGE_CAN_READ:
+			semanage_handle_destroy(handle)
+			raise ValueError(_("Cannot read policy store."))
+
+		rc = semanage_connect(handle)
+		if rc < 0:
+			semanage_handle_destroy(handle)
+			raise ValueError(_("Could not establish semanage connection"))
+
+		is_mls_enabled = semanage_mls_enabled(handle)
+		if is_mls_enabled < 0:
+			semanage_handle_destroy(handle)
+			raise ValueError(_("Could not test MLS enabled status"))
+
+		semanageRecords.handle = handle
+		return semanageRecords.handle
+
+	def deleteall(self):
+		raise ValueError(_("Not yet implemented"))
+
+	def start(self):
+		if semanageRecords.transaction:
+			raise ValueError(_("Semanage transaction already in progress"))
+		self.begin()
+		semanageRecords.transaction = True
+
+	def begin(self):
+		if semanageRecords.transaction:
+			return
+		rc = semanage_begin_transaction(self.sh)
+		if rc < 0:
+			raise ValueError(_("Could not start semanage transaction"))
+	def customized(self):
+		raise ValueError(_("Not yet implemented"))
+
+	def commit(self):
+		if semanageRecords.transaction:
+			return
+		rc = semanage_commit(self.sh) 
+		if rc < 0:
+			raise ValueError(_("Could not commit semanage transaction"))
+
+	def finish(self):
+		if not semanageRecords.transaction:
+			raise ValueError(_("Semanage transaction not in progress"))
+		semanageRecords.transaction = False
+		self.commit()
 
 class moduleRecords(semanageRecords):
 	def __init__(self, store):
-               semanageRecords.__init__(self, store)
+		semanageRecords.__init__(self, store)
 
 	def get_all(self):
-               l = []
-               (rc, mlist, number) = semanage_module_list(self.sh)
-               if rc < 0:
-                      raise ValueError(_("Could not list SELinux modules"))
-
-               for i in range(number):
-                      mod = semanage_module_list_nth(mlist, i)
-                      l.append((semanage_module_get_name(mod), semanage_module_get_version(mod), semanage_module_get_enabled(mod)))
-               return l
+		l = []
+		(rc, mlist, number) = semanage_module_list(self.sh)
+		if rc < 0:
+			raise ValueError(_("Could not list SELinux modules"))
+
+		for i in range(number):
+			mod = semanage_module_list_nth(mlist, i)
+			l.append((semanage_module_get_name(mod), semanage_module_get_version(mod), semanage_module_get_enabled(mod)))
+		return l
 
 	def list(self, heading = 1, locallist = 0):
 		all = self.get_all()
@@ -259,155 +254,155 @@
 			return 
 
 		if heading:
-			print "\n%-25s%-10s\n" % (_("Modules Name"), _("Version"))
-                for t in all:
-                       if t[2] == 0:
-                              disabled = _("Disabled")
-                       else:
-                              disabled = ""
-                       print "%-25s%-10s%s" % (t[0], t[1], disabled)
+			print("\n%-25s%-10s\n" % (_("Modules Name"), _("Version")))
+		for t in all:
+			if t[2] == 0:
+				disabled = _("Disabled")
+			else:
+				disabled = ""
+			print("%-25s%-10s%s" % (t[0], t[1], disabled))
 
 	def add(self, file):
-               rc = semanage_module_install_file(self.sh, file);
-               if rc >= 0:
-                      self.commit()
+		rc = semanage_module_install_file(self.sh, file);
+		if rc >= 0:
+			self.commit()
 
 	def disable(self, module):
-               need_commit = False
-               for m in module.split():
-                      rc = semanage_module_disable(self.sh, m)
-                      if rc < 0 and rc != -3:
-                             raise ValueError(_("Could not disable module %s (remove failed)") % m)
-                      if rc != -3:
-                             need_commit = True
-               if need_commit:
-                      self.commit()
+		need_commit = False
+		for m in module.split():
+			rc = semanage_module_disable(self.sh, m)
+			if rc < 0 and rc != -3:
+				raise ValueError(_("Could not disable module %s (remove failed)") % m)
+			if rc != -3:
+				need_commit = True
+		if need_commit:
+			self.commit()
 
 	def enable(self, module):
-               need_commit = False
-               for m in module.split():
-                      rc = semanage_module_enable(self.sh, m)
-                      if rc < 0 and rc != -3:
-                             raise ValueError(_("Could not enable module %s (remove failed)") % m)
-                      if rc != -3:
-                             need_commit = True
-               if need_commit:
-                      self.commit()
+		need_commit = False
+		for m in module.split():
+			rc = semanage_module_enable(self.sh, m)
+			if rc < 0 and rc != -3:
+				raise ValueError(_("Could not enable module %s (remove failed)") % m)
+			if rc != -3:
+				need_commit = True
+		if need_commit:
+			self.commit()
 
 	def modify(self, file):
-               rc = semanage_module_update_file(self.sh, file);
-               if rc >= 0:
-                      self.commit()
+		rc = semanage_module_update_file(self.sh, file);
+		if rc >= 0:
+			self.commit()
 
 	def delete(self, module):
-               for m in module.split():
-                      rc = semanage_module_remove(self.sh, m)
-                      if rc < 0 and rc != -2:
-                             raise ValueError(_("Could not remove module %s (remove failed)") % m)
+		for m in module.split():
+			rc = semanage_module_remove(self.sh, m)
+			if rc < 0 and rc != -2:
+				raise ValueError(_("Could not remove module %s (remove failed)") % m)
 
-               self.commit()
+		self.commit()
 
 class dontauditClass(semanageRecords):
 	def __init__(self, store):
-               semanageRecords.__init__(self, store)
+		semanageRecords.__init__(self, store)
 
 	def toggle(self, dontaudit):
-               if dontaudit not in [ "on", "off" ]:
-                      raise ValueError(_("dontaudit requires either 'on' or 'off'"))
-               self.begin()
-               rc = semanage_set_disable_dontaudit(self.sh, dontaudit == "off")
-               self.commit()
-               
+		if dontaudit not in [ "on", "off" ]:
+			raise ValueError(_("dontaudit requires either 'on' or 'off'"))
+		self.begin()
+		rc = semanage_set_disable_dontaudit(self.sh, dontaudit == "off")
+		self.commit()
+		
 class permissiveRecords(semanageRecords):
 	def __init__(self, store):
-               semanageRecords.__init__(self, store)
+		semanageRecords.__init__(self, store)
 
 	def get_all(self):
-               l = []
-               (rc, mlist, number) = semanage_module_list(self.sh)
-               if rc < 0:
-                      raise ValueError(_("Could not list SELinux modules"))
-
-               for i in range(number):
-                      mod = semanage_module_list_nth(mlist, i)
-                      name = semanage_module_get_name(mod)
-                      if name and name.startswith("permissive_"):
-                             l.append(name.split("permissive_")[1])
-               return l
+		l = []
+		(rc, mlist, number) = semanage_module_list(self.sh)
+		if rc < 0:
+			raise ValueError(_("Could not list SELinux modules"))
+
+		for i in range(number):
+			mod = semanage_module_list_nth(mlist, i)
+			name = semanage_module_get_name(mod)
+			if name and name.startswith("permissive_"):
+				l.append(name.split("permissive_")[1])
+		return l
 
 	def list(self, heading = 1, locallist = 0):
 		import setools
-		all = map(lambda y: y["name"], filter(lambda x: x["permissive"], setools.seinfo(setools.TYPE)))
+		all = [y["name"] for y in [x for x in setools.seinfo(setools.TYPE) if x["permissive"]]]
 		if len(all) == 0:
 			return 
 
 		if heading:
-			print "\n%-25s\n" % (_("Builtin Permissive Types"))
+			print("\n%-25s\n" % (_("Builtin Permissive Types")))
 		customized = self.get_all()
-                for t in all:
+		for t in all:
 			if t not in customized:
-				print t
+				print(t)
 
 		if len(customized) == 0:
 			return 
 
 		if heading:
-			print "\n%-25s\n" % (_("Customized Permissive Types"))
+			print("\n%-25s\n" % (_("Customized Permissive Types")))
 		for t in customized:
-			print t
+			print(t)
 
 	def add(self, type):
-               import glob
-               name = "permissive_%s" % type
-               dirname = "/var/lib/selinux"
-               os.chdir(dirname)
-               filename = "%s.te" % name
-               modtxt = """
+		import glob
+		name = "permissive_%s" % type
+		dirname = "/var/lib/selinux"
+		os.chdir(dirname)
+		filename = "%s.te" % name
+		modtxt = """
 module %s 1.0;
 
 require {
-          type %s;
+	  type %s;
 }
 
 permissive %s;
 """ % (name, type, type)
-               fd = open(filename, 'w')
-               fd.write(modtxt)
-               fd.close()
-               mc = module.ModuleCompiler()
-               mc.create_module_package(filename, 1)
-               fd = open("permissive_%s.pp" % type)
-               data = fd.read()
-               fd.close()
-
-               rc = semanage_module_install(self.sh, data, len(data));
-               if rc >= 0:
-                      self.commit()
-
-               for root, dirs, files in os.walk("tmp", topdown = False):
-                      for name in files:
-                             os.remove(os.path.join(root, name))
-                      for name in dirs:
-                             os.rmdir(os.path.join(root, name))
-               os.removedirs("tmp")
-               for i in glob.glob("permissive_%s.*" % type):
-                      os.remove(i)
-               if rc < 0:
+		fd = open(filename, 'w')
+		fd.write(modtxt)
+		fd.close()
+		mc = module.ModuleCompiler()
+		mc.create_module_package(filename, 1)
+		fd = open("permissive_%s.pp" % type)
+		data = fd.read()
+		fd.close()
+
+		rc = semanage_module_install(self.sh, data, len(data));
+		if rc >= 0:
+			self.commit()
+
+		for root, dirs, files in os.walk("tmp", topdown = False):
+			for name in files:
+				os.remove(os.path.join(root, name))
+			for name in dirs:
+				os.rmdir(os.path.join(root, name))
+		os.removedirs("tmp")
+		for i in glob.glob("permissive_%s.*" % type):
+			os.remove(i)
+		if rc < 0:
 			raise ValueError(_("Could not set permissive domain %s (module installation failed)") % name)
 
 	def delete(self, name):
-               for n in name.split():
-                      rc = semanage_module_remove(self.sh, "permissive_%s" % n)
-                      if rc < 0:
-                             raise ValueError(_("Could not remove permissive domain %s (remove failed)") % name)
-                      
-               self.commit()
+		for n in name.split():
+			rc = semanage_module_remove(self.sh, "permissive_%s" % n)
+			if rc < 0:
+				raise ValueError(_("Could not remove permissive domain %s (remove failed)") % name)
+			
+		self.commit()
 			
 	def deleteall(self):
-               l = self.get_all()
-               if len(l) > 0:
-                      all = " ".join(l)
-                      self.delete(all)
+		l = self.get_all()
+		if len(l) > 0:
+			all = " ".join(l)
+			self.delete(all)
 
 class loginRecords(semanageRecords):
 	def __init__(self, store = ""):
@@ -432,132 +427,132 @@
 			raise ValueError(_("Could not check if login mapping for %s is defined") % name)
 		if exists:
 			raise ValueError(_("Login mapping for %s is already defined") % name)
-                if name[0] == '%':
-                       try:
-                              grp.getgrnam(name[1:])
-                       except:
-                              raise ValueError(_("Linux Group %s does not exist") % name[1:])
-                else:
-                       try:
-                              pwd.getpwnam(name)
-                       except:
-                              raise ValueError(_("Linux User %s does not exist") % name)
-
-                (rc, u) = semanage_seuser_create(self.sh)
-                if rc < 0:
-                       raise ValueError(_("Could not create login mapping for %s") % name)
-
-                rc = semanage_seuser_set_name(self.sh, u, name)
-                if rc < 0:
-                       raise ValueError(_("Could not set name for %s") % name)
-
-                if serange != "":
-                       rc = semanage_seuser_set_mlsrange(self.sh, u, serange)
-                       if rc < 0:
-                              raise ValueError(_("Could not set MLS range for %s") % name)
-
-                rc = semanage_seuser_set_sename(self.sh, u, sename)
-                if rc < 0:
-                       raise ValueError(_("Could not set SELinux user for %s") % name)
-
-                rc = semanage_seuser_modify_local(self.sh, k, u)
-                if rc < 0:
-                       raise ValueError(_("Could not add login mapping for %s") % name)
+		if name[0] == '%':
+			try:
+				grp.getgrnam(name[1:])
+			except:
+				raise ValueError(_("Linux Group %s does not exist") % name[1:])
+		else:
+			try:
+				pwd.getpwnam(name)
+			except:
+				raise ValueError(_("Linux User %s does not exist") % name)
+
+		(rc, u) = semanage_seuser_create(self.sh)
+		if rc < 0:
+			raise ValueError(_("Could not create login mapping for %s") % name)
+
+		rc = semanage_seuser_set_name(self.sh, u, name)
+		if rc < 0:
+			raise ValueError(_("Could not set name for %s") % name)
+
+		if serange != "":
+			rc = semanage_seuser_set_mlsrange(self.sh, u, serange)
+			if rc < 0:
+				raise ValueError(_("Could not set MLS range for %s") % name)
+
+		rc = semanage_seuser_set_sename(self.sh, u, sename)
+		if rc < 0:
+			raise ValueError(_("Could not set SELinux user for %s") % name)
+
+		rc = semanage_seuser_modify_local(self.sh, k, u)
+		if rc < 0:
+			raise ValueError(_("Could not add login mapping for %s") % name)
 
 		semanage_seuser_key_free(k)
 		semanage_seuser_free(u)
 
 	def add(self, name, sename, serange):
 		try:
-                        self.begin()
-                        self.__add(name, sename, serange)
-                        self.commit()
+			self.begin()
+			self.__add(name, sename, serange)
+			self.commit()
 
-		except ValueError, error:
+		except ValueError as error:
 			mylog.log(0, _("add SELinux user mapping"), name, sename, "", serange);
 			raise error
 		
 		mylog.log(1, _("add SELinux user mapping"), name, sename, "", serange);
 
 	def __modify(self, name, sename = "", serange = ""):
-               if sename == "" and serange == "":
-                      raise ValueError(_("Requires seuser or serange"))
+		if sename == "" and serange == "":
+			raise ValueError(_("Requires seuser or serange"))
+
+		(rc, k) = semanage_seuser_key_create(self.sh, name)
+		if rc < 0:
+			raise ValueError(_("Could not create a key for %s") % name)
 
-               (rc, k) = semanage_seuser_key_create(self.sh, name)
-               if rc < 0:
-                      raise ValueError(_("Could not create a key for %s") % name)
-
-               (rc, exists) = semanage_seuser_exists(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("Login mapping for %s is not defined") % name)
-
-               (rc, u) = semanage_seuser_query(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not query seuser for %s") % name)
-
-               oldserange = semanage_seuser_get_mlsrange(u)
-               oldsename = semanage_seuser_get_sename(u)
-               if serange != "":
-                      semanage_seuser_set_mlsrange(self.sh, u, untranslate(serange))
-               else:
-                      serange = oldserange
-
-               if sename != "":
-                      semanage_seuser_set_sename(self.sh, u, sename)
-               else:
-                      sename = oldsename
-
-               rc = semanage_seuser_modify_local(self.sh, k, u)
-               if rc < 0:
-                      raise ValueError(_("Could not modify login mapping for %s") % name)
+		(rc, exists) = semanage_seuser_exists(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if login mapping for %s is defined") % name)
+		if not exists:
+			raise ValueError(_("Login mapping for %s is not defined") % name)
 
-               semanage_seuser_key_free(k)
-               semanage_seuser_free(u)
+		(rc, u) = semanage_seuser_query(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not query seuser for %s") % name)
 
-               mylog.log(1, "modify selinux user mapping", name, sename, "", serange, oldsename, "", oldserange);
+		oldserange = semanage_seuser_get_mlsrange(u)
+		oldsename = semanage_seuser_get_sename(u)
+		if serange != "":
+			semanage_seuser_set_mlsrange(self.sh, u, untranslate(serange))
+		else:
+			serange = oldserange
+
+		if sename != "":
+			semanage_seuser_set_sename(self.sh, u, sename)
+		else:
+			sename = oldsename
+
+		rc = semanage_seuser_modify_local(self.sh, k, u)
+		if rc < 0:
+			raise ValueError(_("Could not modify login mapping for %s") % name)
+
+		semanage_seuser_key_free(k)
+		semanage_seuser_free(u)
+
+		mylog.log(1, "modify selinux user mapping", name, sename, "", serange, oldsename, "", oldserange);
 
 	def modify(self, name, sename = "", serange = ""):
 		try:
-                        self.begin()
-                        self.__modify(name, sename, serange)
-                        self.commit()
+			self.begin()
+			self.__modify(name, sename, serange)
+			self.commit()
 
-		except ValueError, error:
+		except ValueError as error:
 			mylog.log(0, "modify selinux user mapping", name, sename, "", serange, "", "", "");
 			raise error
 		
 	def __delete(self, name):
-               (rc, k) = semanage_seuser_key_create(self.sh, name)
-               if rc < 0:
-                      raise ValueError(_("Could not create a key for %s") % name)
-
-               (rc, exists) = semanage_seuser_exists(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("Login mapping for %s is not defined") % name)
-
-               (rc, exists) = semanage_seuser_exists_local(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if login mapping for %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("Login mapping for %s is defined in policy, cannot be deleted") % name)
-
-               rc = semanage_seuser_del_local(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not delete login mapping for %s") % name)
+		(rc, k) = semanage_seuser_key_create(self.sh, name)
+		if rc < 0:
+			raise ValueError(_("Could not create a key for %s") % name)
 
-               semanage_seuser_key_free(k)
+		(rc, exists) = semanage_seuser_exists(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if login mapping for %s is defined") % name)
+		if not exists:
+			raise ValueError(_("Login mapping for %s is not defined") % name)
+
+		(rc, exists) = semanage_seuser_exists_local(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if login mapping for %s is defined") % name)
+		if not exists:
+			raise ValueError(_("Login mapping for %s is defined in policy, cannot be deleted") % name)
+
+		rc = semanage_seuser_del_local(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not delete login mapping for %s") % name)
+
+		semanage_seuser_key_free(k)
 
 	def delete(self, name):
 		try:
-                       self.begin()
-                       self.__delete(name)
-                       self.commit()
+			self.begin()
+			self.__delete(name)
+			self.commit()
 
-		except ValueError, error:
+		except ValueError as error:
 			mylog.log(0, "delete SELinux user mapping", name);
 			raise error
 		
@@ -568,17 +563,17 @@
 		if rc < 0:
 			raise ValueError(_("Could not list login mappings"))
 
-                self.begin()
+		self.begin()
 		for u in ulist:
 			self.__delete(semanage_seuser_get_name(u))
-                self.commit()
+		self.commit()
 
 	def get_all(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.ulist) = semanage_seuser_list_local(self.sh)
-                else:
-                       (rc, self.ulist) = semanage_seuser_list(self.sh)
+		if locallist:
+			(rc, self.ulist) = semanage_seuser_list_local(self.sh)
+		else:
+			(rc, self.ulist) = semanage_seuser_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list login mappings"))
 
@@ -587,32 +582,32 @@
 			ddict[name] = (semanage_seuser_get_sename(u), semanage_seuser_get_mlsrange(u))
 		return ddict
 
-        def customized(self):
-                l = []
-                ddict = self.get_all(True)
-                keys = ddict.keys()
-                keys.sort()
-                for k in keys:
-                       l.append("-a -s %s -r '%s' %s" % (ddict[k][0], ddict[k][1], k))
-                return l
+	def customized(self):
+		l = []
+		ddict = self.get_all(True)
+		keys = list(ddict.keys())
+		keys.sort()
+		for k in keys:
+			l.append("-a -s %s -r '%s' %s" % (ddict[k][0], ddict[k][1], k))
+		return l
 
 	def list(self,heading = 1, locallist = 0):
 		ddict = self.get_all(locallist)
-		keys = ddict.keys()
+		keys = list(ddict.keys())
 		if len(keys) == 0:
 			return 
 		keys.sort()
 
 		if is_mls_enabled == 1:
 			if heading:
-				print "\n%-25s %-25s %-25s\n" % (_("Login Name"), _("SELinux User"), _("MLS/MCS Range"))
+				print("\n%-25s %-25s %-25s\n" % (_("Login Name"), _("SELinux User"), _("MLS/MCS Range")))
 			for k in keys:
-				print "%-25s %-25s %-25s" % (k, ddict[k][0], translate(ddict[k][1]))
+				print("%-25s %-25s %-25s" % (k, ddict[k][0], translate(ddict[k][1])))
 		else:
 			if heading:
-				print "\n%-25s %-25s\n" % (_("Login Name"), _("SELinux User"))
+				print("\n%-25s %-25s\n" % (_("Login Name"), _("SELinux User")))
 			for k in keys:
-				print "%-25s %-25s" % (k, ddict[k][0])
+				print("%-25s %-25s" % (k, ddict[k][0]))
 
 class seluserRecords(semanageRecords):
 	def __init__(self, store = ""):
@@ -630,116 +625,116 @@
 			else:
 				selevel = untranslate(selevel)
 			
-                if len(roles) < 1:
-                       raise ValueError(_("You must add at least one role for %s") % name)
-                       
-                (rc, k) = semanage_user_key_create(self.sh, name)
-                if rc < 0:
-                       raise ValueError(_("Could not create a key for %s") % name)
-
-                (rc, exists) = semanage_user_exists(self.sh, k)
-                if rc < 0:
-                       raise ValueError(_("Could not check if SELinux user %s is defined") % name)
-                if exists:
-                       raise ValueError(_("SELinux user %s is already defined") % name)
-
-                (rc, u) = semanage_user_create(self.sh)
-                if rc < 0:
-                       raise ValueError(_("Could not create SELinux user for %s") % name)
-
-                rc = semanage_user_set_name(self.sh, u, name)
-                if rc < 0:
-                       raise ValueError(_("Could not set name for %s") % name)
-
-                for r in roles:
-                       rc = semanage_user_add_role(self.sh, u, r)
-                       if rc < 0:
-                              raise ValueError(_("Could not add role %s for %s") % (r, name))
-
-                if is_mls_enabled == 1:
-                       rc = semanage_user_set_mlsrange(self.sh, u, serange)
-                       if rc < 0:
-                              raise ValueError(_("Could not set MLS range for %s") % name)
-
-                       rc = semanage_user_set_mlslevel(self.sh, u, selevel)
-                       if rc < 0:
-                              raise ValueError(_("Could not set MLS level for %s") % name)
-                rc = semanage_user_set_prefix(self.sh, u, prefix)
-                if rc < 0:
-                       raise ValueError(_("Could not add prefix %s for %s") % (r, prefix))
-                (rc, key) = semanage_user_key_extract(self.sh,u)
-                if rc < 0:
-                       raise ValueError(_("Could not extract key for %s") % name)
-
-                rc = semanage_user_modify_local(self.sh, k, u)
-                if rc < 0:
-                       raise ValueError(_("Could not add SELinux user %s") % name)
+		if len(roles) < 1:
+			raise ValueError(_("You must add at least one role for %s") % name)
+			
+		(rc, k) = semanage_user_key_create(self.sh, name)
+		if rc < 0:
+			raise ValueError(_("Could not create a key for %s") % name)
+
+		(rc, exists) = semanage_user_exists(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if SELinux user %s is defined") % name)
+		if exists:
+			raise ValueError(_("SELinux user %s is already defined") % name)
+
+		(rc, u) = semanage_user_create(self.sh)
+		if rc < 0:
+			raise ValueError(_("Could not create SELinux user for %s") % name)
 
-                semanage_user_key_free(k)
-                semanage_user_free(u)
+		rc = semanage_user_set_name(self.sh, u, name)
+		if rc < 0:
+			raise ValueError(_("Could not set name for %s") % name)
+
+		for r in roles:
+			rc = semanage_user_add_role(self.sh, u, r)
+			if rc < 0:
+				raise ValueError(_("Could not add role %s for %s") % (r, name))
+
+		if is_mls_enabled == 1:
+			rc = semanage_user_set_mlsrange(self.sh, u, serange)
+			if rc < 0:
+				raise ValueError(_("Could not set MLS range for %s") % name)
+
+			rc = semanage_user_set_mlslevel(self.sh, u, selevel)
+			if rc < 0:
+				raise ValueError(_("Could not set MLS level for %s") % name)
+		rc = semanage_user_set_prefix(self.sh, u, prefix)
+		if rc < 0:
+			raise ValueError(_("Could not add prefix %s for %s") % (r, prefix))
+		(rc, key) = semanage_user_key_extract(self.sh,u)
+		if rc < 0:
+			raise ValueError(_("Could not extract key for %s") % name)
+
+		rc = semanage_user_modify_local(self.sh, k, u)
+		if rc < 0:
+			raise ValueError(_("Could not add SELinux user %s") % name)
+
+		semanage_user_key_free(k)
+		semanage_user_free(u)
 
 	def add(self, name, roles, selevel, serange, prefix):
 		seroles = " ".join(roles)
-                try:
-                       self.begin()
-                       self.__add( name, roles, selevel, serange, prefix)
-                       self.commit()
-		except ValueError, error:
+		try:
+			self.begin()
+			self.__add( name, roles, selevel, serange, prefix)
+			self.commit()
+		except ValueError as error:
 			mylog.log(0,"add SELinux user record", name, name, seroles, serange)
 			raise error
 		
 		mylog.log(1,"add SELinux user record", name, name, seroles, serange)
 
-        def __modify(self, name, roles = [], selevel = "", serange = "", prefix = ""):
+	def __modify(self, name, roles = [], selevel = "", serange = "", prefix = ""):
 		oldroles = ""
 		oldserange = ""
-		newroles = string.join(roles, ' ');
-                if prefix == "" and len(roles) == 0  and serange == "" and selevel == "":
-                       if is_mls_enabled == 1:
-                              raise ValueError(_("Requires prefix, roles, level or range"))
-                       else:
-                              raise ValueError(_("Requires prefix or roles"))
-
-                (rc, k) = semanage_user_key_create(self.sh, name)
-                if rc < 0:
-                       raise ValueError(_("Could not create a key for %s") % name)
-
-                (rc, exists) = semanage_user_exists(self.sh, k)
-                if rc < 0:
-                       raise ValueError(_("Could not check if SELinux user %s is defined") % name)
-                if not exists:
-                       raise ValueError(_("SELinux user %s is not defined") % name)
-
-                (rc, u) = semanage_user_query(self.sh, k)
-                if rc < 0:
-                       raise ValueError(_("Could not query user for %s") % name)
-
-                oldserange = semanage_user_get_mlsrange(u)
-                (rc, rlist) = semanage_user_get_roles(self.sh, u)
-                if rc >= 0:
-                       oldroles = string.join(rlist, ' ');
-                       newroles = newroles + ' ' + oldroles;
-
-
-                if serange != "":
-                       semanage_user_set_mlsrange(self.sh, u, untranslate(serange))
-                if selevel != "":
-                       semanage_user_set_mlslevel(self.sh, u, untranslate(selevel))
-
-                if prefix != "":
-                       semanage_user_set_prefix(self.sh, u, prefix)
-
-                if len(roles) != 0:
-                       for r in rlist:
-                              if r not in roles:
-                                     semanage_user_del_role(u, r)
-                       for r in roles:
-                              if r not in rlist:
-                                     semanage_user_add_role(self.sh, u, r)
-
-                rc = semanage_user_modify_local(self.sh, k, u)
-                if rc < 0:
-                       raise ValueError(_("Could not modify SELinux user %s") % name)
+		newroles = roles.join(' ');
+		if prefix == "" and len(roles) == 0  and serange == "" and selevel == "":
+			if is_mls_enabled == 1:
+				raise ValueError(_("Requires prefix, roles, level or range"))
+			else:
+				raise ValueError(_("Requires prefix or roles"))
+
+		(rc, k) = semanage_user_key_create(self.sh, name)
+		if rc < 0:
+			raise ValueError(_("Could not create a key for %s") % name)
+
+		(rc, exists) = semanage_user_exists(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if SELinux user %s is defined") % name)
+		if not exists:
+			raise ValueError(_("SELinux user %s is not defined") % name)
+
+		(rc, u) = semanage_user_query(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not query user for %s") % name)
+
+		oldserange = semanage_user_get_mlsrange(u)
+		(rc, rlist) = semanage_user_get_roles(self.sh, u)
+		if rc >= 0:
+			oldroles = rlist.join(' ');
+			newroles = newroles + ' ' + oldroles;
+
+
+		if serange != "":
+			semanage_user_set_mlsrange(self.sh, u, untranslate(serange))
+		if selevel != "":
+			semanage_user_set_mlslevel(self.sh, u, untranslate(selevel))
+
+		if prefix != "":
+			semanage_user_set_prefix(self.sh, u, prefix)
+
+		if len(roles) != 0:
+			for r in rlist:
+				if r not in roles:
+					semanage_user_del_role(u, r)
+			for r in roles:
+				if r not in rlist:
+					semanage_user_add_role(self.sh, u, r)
+
+		rc = semanage_user_modify_local(self.sh, k, u)
+		if rc < 0:
+			raise ValueError(_("Could not modify SELinux user %s") % name)
 
 		semanage_user_key_free(k)
 		semanage_user_free(u)
@@ -749,44 +744,44 @@
 
 	def modify(self, name, roles = [], selevel = "", serange = "", prefix = ""):
 		try:
-                        self.begin()
-                        self.__modify(name, roles, selevel, serange, prefix)
-                        self.commit()
+			self.begin()
+			self.__modify(name, roles, selevel, serange, prefix)
+			self.commit()
 
-		except ValueError, error:
+		except ValueError as error:
 			mylog.log(0,"modify SELinux user record", name, "", " ".join(roles), serange, "", "", "")
 			raise error
 
 	def __delete(self, name):
-               (rc, k) = semanage_user_key_create(self.sh, name)
-               if rc < 0:
-                      raise ValueError(_("Could not create a key for %s") % name)
-			
-               (rc, exists) = semanage_user_exists(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if SELinux user %s is defined") % name)		
-               if not exists:
-                      raise ValueError(_("SELinux user %s is not defined") % name)
-
-               (rc, exists) = semanage_user_exists_local(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not check if SELinux user %s is defined") % name)
-               if not exists:
-                      raise ValueError(_("SELinux user %s is defined in policy, cannot be deleted") % name)
-			
-               rc = semanage_user_del_local(self.sh, k)
-               if rc < 0:
-                      raise ValueError(_("Could not delete SELinux user %s") % name)
+		(rc, k) = semanage_user_key_create(self.sh, name)
+		if rc < 0:
+			raise ValueError(_("Could not create a key for %s") % name)
+			
+		(rc, exists) = semanage_user_exists(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if SELinux user %s is defined") % name)		
+		if not exists:
+			raise ValueError(_("SELinux user %s is not defined") % name)
 
-               semanage_user_key_free(k)		
+		(rc, exists) = semanage_user_exists_local(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if SELinux user %s is defined") % name)
+		if not exists:
+			raise ValueError(_("SELinux user %s is defined in policy, cannot be deleted") % name)
+			
+		rc = semanage_user_del_local(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not delete SELinux user %s") % name)
+
+		semanage_user_key_free(k)		
 
 	def delete(self, name):
 		try:
-                        self.begin()
-                        self.__delete(name)
-                        self.commit()
+			self.begin()
+			self.__delete(name)
+			self.commit()
 
-		except ValueError, error:
+		except ValueError as error:
 			mylog.log(0,"delete SELinux user record", name)
 			raise error
 		
@@ -797,17 +792,17 @@
 		if rc < 0:
 			raise ValueError(_("Could not list login mappings"))
 
-                self.begin()
+		self.begin()
 		for u in ulist:
 			self.__delete(semanage_user_get_name(u))
-                self.commit()
+		self.commit()
 
 	def get_all(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.ulist) = semanage_user_list_local(self.sh)
-                else:
-                       (rc, self.ulist) = semanage_user_list(self.sh)
+		if locallist:
+			(rc, self.ulist) = semanage_user_list_local(self.sh)
+		else:
+			(rc, self.ulist) = semanage_user_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list SELinux users"))
 
@@ -817,38 +812,38 @@
 			if rc < 0:
 				raise ValueError(_("Could not list roles for user %s") % name)
 
-			roles = string.join(rlist, ' ');
+			roles = rlist.join(' ');
 			ddict[semanage_user_get_name(u)] = (semanage_user_get_prefix(u), semanage_user_get_mlslevel(u), semanage_user_get_mlsrange(u), roles)
 
 		return ddict
 
-        def customized(self):
-                l = []
-                ddict = self.get_all(True)
-                keys = ddict.keys()
-                keys.sort()
-                for k in keys:
-                       l.append("-a -r %s -R '%s' %s" % (ddict[k][2], ddict[k][3], k))
-                return l
+	def customized(self):
+		l = []
+		ddict = self.get_all(True)
+		keys = list(ddict.keys())
+		keys.sort()
+		for k in keys:
+			l.append("-a -r %s -R '%s' %s" % (ddict[k][2], ddict[k][3], k))
+		return l
 
 	def list(self, heading = 1, locallist = 0):
 		ddict = self.get_all(locallist)
-		keys = ddict.keys()
+		keys = list(ddict.keys())
 		if len(keys) == 0:
 			return 
 		keys.sort()
 
 		if is_mls_enabled == 1:
 			if heading:
-				print "\n%-15s %-10s %-10s %-30s" % ("", _("Labeling"), _("MLS/"), _("MLS/"))
-				print "%-15s %-10s %-10s %-30s %s\n" % (_("SELinux User"), _("Prefix"), _("MCS Level"), _("MCS Range"), _("SELinux Roles"))
+				print("\n%-15s %-10s %-10s %-30s" % ("", _("Labeling"), _("MLS/"), _("MLS/")))
+				print("%-15s %-10s %-10s %-30s %s\n" % (_("SELinux User"), _("Prefix"), _("MCS Level"), _("MCS Range"), _("SELinux Roles")))
 			for k in keys:
-				print "%-15s %-10s %-10s %-30s %s" % (k, ddict[k][0], translate(ddict[k][1]), translate(ddict[k][2]), ddict[k][3])
+				print("%-15s %-10s %-10s %-30s %s" % (k, ddict[k][0], translate(ddict[k][1]), translate(ddict[k][2]), ddict[k][3]))
 		else:
 			if heading:
-				print "%-15s %s\n" % (_("SELinux User"), _("SELinux Roles"))
+				print("%-15s %s\n" % (_("SELinux User"), _("SELinux Roles")))
 			for k in keys:
-				print "%-15s %s" % (k, ddict[k][3])
+				print("%-15s %s" % (k, ddict[k][3]))
 
 class portRecords(semanageRecords):
 	def __init__(self, store = ""):
@@ -938,9 +933,9 @@
 		semanage_port_free(p)
 
 	def add(self, port, proto, serange, type):
-                self.begin()
-                self.__add(port, proto, serange, type)
-                self.commit()
+		self.begin()
+		self.__add(port, proto, serange, type)
+		self.commit()
 
 	def __modify(self, port, proto, serange, setype):
 		if serange == "" and setype == "":
@@ -976,33 +971,33 @@
 		semanage_port_free(p)
 
 	def modify(self, port, proto, serange, setype):
-                self.begin()
-                self.__modify(port, proto, serange, setype)
-                self.commit()
+		self.begin()
+		self.__modify(port, proto, serange, setype)
+		self.commit()
 
 	def deleteall(self):
 		(rc, plist) = semanage_port_list_local(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list the ports"))
 
-                self.begin()
+		self.begin()
 
 		for port in plist:
-                       proto = semanage_port_get_proto(port)
-                       proto_str = semanage_port_get_proto_str(proto)
-                       low = semanage_port_get_low(port)
-                       high = semanage_port_get_high(port)
-                       port_str = "%s-%s" % (low, high)
-                       ( k, proto_d, low, high ) = self.__genkey(port_str , proto_str)
-                       if rc < 0:
-                              raise ValueError(_("Could not create a key for %s") % port_str)
-
-                       rc = semanage_port_del_local(self.sh, k)
-                       if rc < 0:
-                              raise ValueError(_("Could not delete the port %s") % port_str)
-                       semanage_port_key_free(k)
+			proto = semanage_port_get_proto(port)
+			proto_str = semanage_port_get_proto_str(proto)
+			low = semanage_port_get_low(port)
+			high = semanage_port_get_high(port)
+			port_str = "%s-%s" % (low, high)
+			( k, proto_d, low, high ) = self.__genkey(port_str , proto_str)
+			if rc < 0:
+				raise ValueError(_("Could not create a key for %s") % port_str)
+
+			rc = semanage_port_del_local(self.sh, k)
+			if rc < 0:
+				raise ValueError(_("Could not delete the port %s") % port_str)
+			semanage_port_key_free(k)
 	
-                self.commit()
+		self.commit()
 
 	def __delete(self, port, proto):
 		( k, proto_d, low, high ) = self.__genkey(port, proto)
@@ -1025,16 +1020,16 @@
 		semanage_port_key_free(k)
 
 	def delete(self, port, proto):
-                self.begin()
-                self.__delete(port, proto)
-                self.commit()
+		self.begin()
+		self.__delete(port, proto)
+		self.commit()
 
 	def get_all(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.plist) = semanage_port_list_local(self.sh)
-                else:
-                       (rc, self.plist) = semanage_port_list(self.sh)
+		if locallist:
+			(rc, self.plist) = semanage_port_list_local(self.sh)
+		else:
+			(rc, self.plist) = semanage_port_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list ports"))
 
@@ -1053,10 +1048,10 @@
 
 	def get_all_by_type(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.plist) = semanage_port_list_local(self.sh)
-                else:
-                       (rc, self.plist) = semanage_port_list(self.sh)
+		if locallist:
+			(rc, self.plist) = semanage_port_list_local(self.sh)
+		else:
+			(rc, self.plist) = semanage_port_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list ports"))
 
@@ -1069,7 +1064,7 @@
 			proto_str = semanage_port_get_proto_str(proto)
 			low = semanage_port_get_low(port)
 			high = semanage_port_get_high(port)
-			if (ctype, proto_str) not in ddict.keys():
+			if (ctype, proto_str) not in list(ddict.keys()):
 				ddict[(ctype,proto_str)] = []
 			if low == high:
 				ddict[(ctype,proto_str)].append("%d" % low)
@@ -1077,258 +1072,258 @@
 				ddict[(ctype,proto_str)].append("%d-%d" % (low, high))
 		return ddict
 
-        def customized(self):
-                l = []
+	def customized(self):
+		l = []
 		ddict = self.get_all(True)
-		keys = ddict.keys()
+		keys = list(ddict.keys())
 		keys.sort()
-                for k in keys:
-                       if k[0] == k[1]:
-                              l.append("-a -t %s -p %s %s" % (ddict[k][0], k[2], k[0]))
-                       else:
-                              l.append("-a -t %s -p %s %s-%s" % (ddict[k][0], k[2], k[0], k[1]))
-                return l
+		for k in keys:
+			if k[0] == k[1]:
+				l.append("-a -t %s -p %s %s" % (ddict[k][0], k[2], k[0]))
+			else:
+				l.append("-a -t %s -p %s %s-%s" % (ddict[k][0], k[2], k[0], k[1]))
+		return l
 
 	def list(self, heading = 1, locallist = 0):
 		ddict = self.get_all_by_type(locallist)
-		keys = ddict.keys()
+		keys = list(ddict.keys())
 		if len(keys) == 0:
 			return 
 		keys.sort()
 
 		if heading:
-			print "%-30s %-8s %s\n" % (_("SELinux Port Type"), _("Proto"), _("Port Number"))
+			print("%-30s %-8s %s\n" % (_("SELinux Port Type"), _("Proto"), _("Port Number")))
 		for i in keys:
 			rec = "%-30s %-8s " % i
 			rec += "%s" % ddict[i][0]
 			for p in ddict[i][1:]:
 				rec += ", %s" % p
-			print rec
+			print(rec)
 
 class nodeRecords(semanageRecords):
-       def __init__(self, store = ""):
-               semanageRecords.__init__(self,store)
-               self.protocol = ["ipv4", "ipv6"]
-
-       def validate(self, addr, mask, protocol):
-               newaddr=addr
-               newmask=mask
-               newprotocol=""
-
-               if addr == "":
-                       raise ValueError(_("Node Address is required"))
-
-               # verify valid comination
-               if len(mask) == 0 or mask[0] == "/":
-                       i = IP(addr + mask)
-                       newaddr = i.strNormal(0)
-                       newmask = str(i.netmask())
-                       if newmask == "0.0.0.0" and i.version() == 6:
-                               newmask = "::"
-
-                       protocol = "ipv%d" % i.version()
-
-               try:
-                      newprotocol = self.protocol.index(protocol)
-               except:
-                      raise ValueError(_("Unknown or missing protocol"))
-
-               return newaddr, newmask, newprotocol
-
-       def __add(self, addr, mask, proto, serange, ctype):
-               addr, mask, proto = self.validate(addr, mask, proto)
-
-               if is_mls_enabled == 1:
-                       if serange == "":
-                               serange = "s0"
-                       else:
-                               serange = untranslate(serange)
-
-               if ctype == "":
-                       raise ValueError(_("SELinux Type is required"))
-
-               (rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
-               if rc < 0:
-                       raise ValueError(_("Could not create key for %s") % addr)
-               if rc < 0:
-                       raise ValueError(_("Could not check if addr %s is defined") % addr)
-
-               (rc, exists) = semanage_node_exists(self.sh, k)
-               if exists:
-                       raise ValueError(_("Addr %s already defined") % addr)
-
-               (rc, node) = semanage_node_create(self.sh)
-               if rc < 0:
-                       raise ValueError(_("Could not create addr for %s") % addr)
-               semanage_node_set_proto(node, proto)
-
-               rc = semanage_node_set_addr(self.sh, node, proto, addr)
-               (rc, con) = semanage_context_create(self.sh)
-               if rc < 0:
-                       raise ValueError(_("Could not create context for %s") % addr)
-
-               rc = semanage_node_set_mask(self.sh, node, proto, mask)
-               if rc < 0:
-                       raise ValueError(_("Could not set mask for %s") % addr)
-
-               rc = semanage_context_set_user(self.sh, con, "system_u")
-               if rc < 0:
-                       raise ValueError(_("Could not set user in addr context for %s") % addr)
-
-               rc = semanage_context_set_role(self.sh, con, "object_r")
-               if rc < 0:
-                       raise ValueError(_("Could not set role in addr context for %s") % addr)
-
-               rc = semanage_context_set_type(self.sh, con, ctype)
-               if rc < 0:
-                       raise ValueError(_("Could not set type in addr context for %s") % addr)
-
-               if serange != "":
-                       rc = semanage_context_set_mls(self.sh, con, serange)
-                       if rc < 0:
-                               raise ValueError(_("Could not set mls fields in addr context for %s") % addr)
-
-               rc = semanage_node_set_con(self.sh, node, con)
-               if rc < 0:
-                       raise ValueError(_("Could not set addr context for %s") % addr)
-
-               rc = semanage_node_modify_local(self.sh, k, node)
-               if rc < 0:
-                       raise ValueError(_("Could not add addr %s") % addr)
-
-               semanage_context_free(con)
-               semanage_node_key_free(k)
-               semanage_node_free(node)
-
-       def add(self, addr, mask, proto, serange, ctype):
-                self.begin()
-                self.__add(addr, mask, proto, serange, ctype)
-                self.commit()
-
-       def __modify(self, addr, mask, proto, serange, setype):
-               addr, mask, proto = self.validate(addr, mask, proto)
-
-               if serange == "" and setype == "":
-                       raise ValueError(_("Requires setype or serange"))
-
-               (rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
-               if rc < 0:
-                       raise ValueError(_("Could not create key for %s") % addr)
-
-               (rc, exists) = semanage_node_exists(self.sh, k)
-               if rc < 0:
-                       raise ValueError(_("Could not check if addr %s is defined") % addr)
-               if not exists:
-                       raise ValueError(_("Addr %s is not defined") % addr)
-
-               (rc, node) = semanage_node_query(self.sh, k)
-               if rc < 0:
-                       raise ValueError(_("Could not query addr %s") % addr)
-
-               con = semanage_node_get_con(node)
-               if serange != "":
-                       semanage_context_set_mls(self.sh, con, untranslate(serange))
-               if setype != "":
-                       semanage_context_set_type(self.sh, con, setype)
-
-               rc = semanage_node_modify_local(self.sh, k, node)
-               if rc < 0:
-                       raise ValueError(_("Could not modify addr %s") % addr)
-
-               semanage_node_key_free(k)
-               semanage_node_free(node)
-
-       def modify(self, addr, mask, proto, serange, setype):
-                self.begin()
-                self.__modify(addr, mask, proto, serange, setype)
-                self.commit()
-
-       def __delete(self, addr, mask, proto):
-
-               addr, mask, proto = self.validate(addr, mask, proto)
-
-               (rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
-               if rc < 0:
-                       raise ValueError(_("Could not create key for %s") % addr)
-
-               (rc, exists) = semanage_node_exists(self.sh, k)
-               if rc < 0:
-                       raise ValueError(_("Could not check if addr %s is defined") % addr)
-               if not exists:
-                       raise ValueError(_("Addr %s is not defined") % addr)
-
-               (rc, exists) = semanage_node_exists_local(self.sh, k)
-               if rc < 0:
-                       raise ValueError(_("Could not check if addr %s is defined") % addr)
-               if not exists:
-                       raise ValueError(_("Addr %s is defined in policy, cannot be deleted") % addr)
-
-               rc = semanage_node_del_local(self.sh, k)
-               if rc < 0:
-                       raise ValueError(_("Could not delete addr %s") % addr)
-
-               semanage_node_key_free(k)
-
-       def delete(self, addr, mask, proto):
-              self.begin()
-              self.__delete(addr, mask, proto)
-              self.commit()
+	def __init__(self, store = ""):
+		semanageRecords.__init__(self,store)
+		self.protocol = ["ipv4", "ipv6"]
+
+	def validate(self, addr, mask, protocol):
+		newaddr=addr
+		newmask=mask
+		newprotocol=""
+
+		if addr == "":
+			raise ValueError(_("Node Address is required"))
+
+		# verify valid comination
+		if len(mask) == 0 or mask[0] == "/":
+			i = IP(addr + mask)
+			newaddr = i.strNormal(0)
+			newmask = str(i.netmask())
+			if newmask == "0.0.0.0" and i.version() == 6:
+				newmask = "::"
+
+			protocol = "ipv%d" % i.version()
+
+		try:
+			newprotocol = self.protocol.index(protocol)
+		except:
+			raise ValueError(_("Unknown or missing protocol"))
+
+		return newaddr, newmask, newprotocol
+
+	def __add(self, addr, mask, proto, serange, ctype):
+		addr, mask, proto = self.validate(addr, mask, proto)
+
+		if is_mls_enabled == 1:
+			if serange == "":
+				serange = "s0"
+			else:
+				serange = untranslate(serange)
+
+		if ctype == "":
+			raise ValueError(_("SELinux Type is required"))
+
+		(rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
+		if rc < 0:
+			raise ValueError(_("Could not create key for %s") % addr)
+		if rc < 0:
+			raise ValueError(_("Could not check if addr %s is defined") % addr)
+
+		(rc, exists) = semanage_node_exists(self.sh, k)
+		if exists:
+			raise ValueError(_("Addr %s already defined") % addr)
+
+		(rc, node) = semanage_node_create(self.sh)
+		if rc < 0:
+			raise ValueError(_("Could not create addr for %s") % addr)
+		semanage_node_set_proto(node, proto)
+
+		rc = semanage_node_set_addr(self.sh, node, proto, addr)
+		(rc, con) = semanage_context_create(self.sh)
+		if rc < 0:
+			raise ValueError(_("Could not create context for %s") % addr)
+
+		rc = semanage_node_set_mask(self.sh, node, proto, mask)
+		if rc < 0:
+			raise ValueError(_("Could not set mask for %s") % addr)
+
+		rc = semanage_context_set_user(self.sh, con, "system_u")
+		if rc < 0:
+			raise ValueError(_("Could not set user in addr context for %s") % addr)
+
+		rc = semanage_context_set_role(self.sh, con, "object_r")
+		if rc < 0:
+			raise ValueError(_("Could not set role in addr context for %s") % addr)
+
+		rc = semanage_context_set_type(self.sh, con, ctype)
+		if rc < 0:
+			raise ValueError(_("Could not set type in addr context for %s") % addr)
+
+		if serange != "":
+			rc = semanage_context_set_mls(self.sh, con, serange)
+			if rc < 0:
+				raise ValueError(_("Could not set mls fields in addr context for %s") % addr)
+
+		rc = semanage_node_set_con(self.sh, node, con)
+		if rc < 0:
+			raise ValueError(_("Could not set addr context for %s") % addr)
+
+		rc = semanage_node_modify_local(self.sh, k, node)
+		if rc < 0:
+			raise ValueError(_("Could not add addr %s") % addr)
+
+		semanage_context_free(con)
+		semanage_node_key_free(k)
+		semanage_node_free(node)
+
+	def add(self, addr, mask, proto, serange, ctype):
+		self.begin()
+		self.__add(addr, mask, proto, serange, ctype)
+		self.commit()
+
+	def __modify(self, addr, mask, proto, serange, setype):
+		addr, mask, proto = self.validate(addr, mask, proto)
+
+		if serange == "" and setype == "":
+			raise ValueError(_("Requires setype or serange"))
+
+		(rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
+		if rc < 0:
+			raise ValueError(_("Could not create key for %s") % addr)
+
+		(rc, exists) = semanage_node_exists(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if addr %s is defined") % addr)
+		if not exists:
+			raise ValueError(_("Addr %s is not defined") % addr)
+
+		(rc, node) = semanage_node_query(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not query addr %s") % addr)
+
+		con = semanage_node_get_con(node)
+		if serange != "":
+			semanage_context_set_mls(self.sh, con, untranslate(serange))
+		if setype != "":
+			semanage_context_set_type(self.sh, con, setype)
+
+		rc = semanage_node_modify_local(self.sh, k, node)
+		if rc < 0:
+			raise ValueError(_("Could not modify addr %s") % addr)
+
+		semanage_node_key_free(k)
+		semanage_node_free(node)
+
+	def modify(self, addr, mask, proto, serange, setype):
+		self.begin()
+		self.__modify(addr, mask, proto, serange, setype)
+		self.commit()
+
+	def __delete(self, addr, mask, proto):
+
+		addr, mask, proto = self.validate(addr, mask, proto)
+
+		(rc, k) = semanage_node_key_create(self.sh, addr, mask, proto)
+		if rc < 0:
+			raise ValueError(_("Could not create key for %s") % addr)
+
+		(rc, exists) = semanage_node_exists(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if addr %s is defined") % addr)
+		if not exists:
+			raise ValueError(_("Addr %s is not defined") % addr)
+
+		(rc, exists) = semanage_node_exists_local(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if addr %s is defined") % addr)
+		if not exists:
+			raise ValueError(_("Addr %s is defined in policy, cannot be deleted") % addr)
+
+		rc = semanage_node_del_local(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not delete addr %s") % addr)
+
+		semanage_node_key_free(k)
+
+	def delete(self, addr, mask, proto):
+		self.begin()
+		self.__delete(addr, mask, proto)
+		self.commit()
 		
-       def deleteall(self):
-              (rc, nlist) = semanage_node_list_local(self.sh)
-              if rc < 0:
-                     raise ValueError(_("Could not deleteall node mappings"))
-
-              self.begin()
-              for node in nlist:
-                     self.__delete(semanage_node_get_addr(self.sh, node)[1], semanage_node_get_mask(self.sh, node)[1], self.protocol[semanage_node_get_proto(node)])
-              self.commit()
-
-       def get_all(self, locallist = 0):
-               ddict = {}
-	       if locallist :
+	def deleteall(self):
+		(rc, nlist) = semanage_node_list_local(self.sh)
+		if rc < 0:
+			raise ValueError(_("Could not deleteall node mappings"))
+
+		self.begin()
+		for node in nlist:
+			self.__delete(semanage_node_get_addr(self.sh, node)[1], semanage_node_get_mask(self.sh, node)[1], self.protocol[semanage_node_get_proto(node)])
+		self.commit()
+
+	def get_all(self, locallist = 0):
+		ddict = {}
+		if locallist :
 			(rc, self.ilist) = semanage_node_list_local(self.sh)
-	       else:
-	                (rc, self.ilist) = semanage_node_list(self.sh)
-               if rc < 0:
-                       raise ValueError(_("Could not list addrs"))
-
-               for node in self.ilist:
-                       con = semanage_node_get_con(node)
-                       addr = semanage_node_get_addr(self.sh, node)
-                       mask = semanage_node_get_mask(self.sh, node)
-                       proto = self.protocol[semanage_node_get_proto(node)]
-                       ddict[(addr[1], mask[1], proto)] = (semanage_context_get_user(con), semanage_context_get_role(con), semanage_context_get_type(con), semanage_context_get_mls(con))
-
-               return ddict
-
-       def customized(self):
-               l = []
-               ddict = self.get_all(True)
-               keys = ddict.keys()
-               keys.sort()
-               for k in keys:
-                      l.append("-a -M %s -p %s -t %s %s" % (k[1], k[2],ddict[k][2], k[0]))
-               return l
-
-       def list(self, heading = 1, locallist = 0):
-               ddict = self.get_all(locallist)
-               keys = ddict.keys()
-	       if len(keys) == 0:
-		       return 
-               keys.sort()
-
-               if heading:
-                       print "%-18s %-18s %-5s %-5s\n" % ("IP Address", "Netmask", "Protocol", "Context")
-               if is_mls_enabled:
+		else:
+			(rc, self.ilist) = semanage_node_list(self.sh)
+		if rc < 0:
+			raise ValueError(_("Could not list addrs"))
+
+		for node in self.ilist:
+			con = semanage_node_get_con(node)
+			addr = semanage_node_get_addr(self.sh, node)
+			mask = semanage_node_get_mask(self.sh, node)
+			proto = self.protocol[semanage_node_get_proto(node)]
+			ddict[(addr[1], mask[1], proto)] = (semanage_context_get_user(con), semanage_context_get_role(con), semanage_context_get_type(con), semanage_context_get_mls(con))
+
+		return ddict
+
+	def customized(self):
+		l = []
+		ddict = self.get_all(True)
+		keys = list(ddict.keys())
+		keys.sort()
+		for k in keys:
+			l.append("-a -M %s -p %s -t %s %s" % (k[1], k[2],ddict[k][2], k[0]))
+		return l
+
+	def list(self, heading = 1, locallist = 0):
+		ddict = self.get_all(locallist)
+		keys = list(ddict.keys())
+		if len(keys) == 0:
+			return 
+		keys.sort()
+
+		if heading:
+			print("%-18s %-18s %-5s %-5s\n" % ("IP Address", "Netmask", "Protocol", "Context"))
+		if is_mls_enabled:
 			for k in keys:
 				val = ''
 				for fields in k:
 					val = val + '\t' + str(fields)
-                                print "%-18s %-18s %-5s %s:%s:%s:%s " % (k[0],k[1],k[2],ddict[k][0], ddict[k][1],ddict[k][2], translate(ddict[k][3], False))
-               else:
-                       for k in keys:
-                               print "%-18s %-18s %-5s %s:%s:%s " % (k[0],k[1],k[2],ddict[k][0], ddict[k][1],ddict[k][2])
+				print("%-18s %-18s %-5s %s:%s:%s:%s " % (k[0],k[1],k[2],ddict[k][0], ddict[k][1],ddict[k][2], translate(ddict[k][3], False)))
+		else:
+			for k in keys:
+				print("%-18s %-18s %-5s %s:%s:%s " % (k[0],k[1],k[2],ddict[k][0], ddict[k][1],ddict[k][2]))
 
 
 class interfaceRecords(semanageRecords):
@@ -1398,9 +1393,9 @@
 		semanage_iface_free(iface)
 
 	def add(self, interface, serange, ctype):
-                self.begin()
-                self.__add(interface, serange, ctype)
-                self.commit()
+		self.begin()
+		self.__add(interface, serange, ctype)
+		self.commit()
 
 	def __modify(self, interface, serange, setype):
 		if serange == "" and setype == "":
@@ -1435,9 +1430,9 @@
 		semanage_iface_free(iface)
 
 	def modify(self, interface, serange, setype):
-                self.begin()
-                self.__modify(interface, serange, setype)
-                self.commit()
+		self.begin()
+		self.__modify(interface, serange, setype)
+		self.commit()
 
 	def __delete(self, interface):
 		(rc, k) = semanage_iface_key_create(self.sh, interface)
@@ -1463,26 +1458,26 @@
 		semanage_iface_key_free(k)
 
 	def delete(self, interface):
-                self.begin()
-                self.__delete(interface)
-                self.commit()
+		self.begin()
+		self.__delete(interface)
+		self.commit()
 		
-        def deleteall(self):
+	def deleteall(self):
 		(rc, ulist) = semanage_iface_list_local(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not delete all interface  mappings"))
 
-                self.begin()
+		self.begin()
 		for i in ulist:
 			self.__delete(semanage_iface_get_name(i))
-                self.commit()
+		self.commit()
 
 	def get_all(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.ilist) = semanage_iface_list_local(self.sh)
-                else:
-                       (rc, self.ilist) = semanage_iface_list(self.sh)
+		if locallist:
+			(rc, self.ilist) = semanage_iface_list_local(self.sh)
+		else:
+			(rc, self.ilist) = semanage_iface_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list interfaces"))
 
@@ -1492,132 +1487,132 @@
 
 		return ddict
 			
-        def customized(self):
-                l = []
-                ddict = self.get_all(True)
-                keys = ddict.keys()
-                keys.sort()
-                for k in keys:
-                       l.append("-a -t %s %s" % (ddict[k][2], k))
-                return l
+	def customized(self):
+		l = []
+		ddict = self.get_all(True)
+		keys = list(ddict.keys())
+		keys.sort()
+		for k in keys:
+			l.append("-a -t %s %s" % (ddict[k][2], k))
+		return l
 
 	def list(self, heading = 1, locallist = 0):
 		ddict = self.get_all(locallist)
-		keys = ddict.keys()
+		keys = list(ddict.keys())
 		if len(keys) == 0:
 			return 
 		keys.sort()
 
 		if heading:
-			print "%-30s %s\n" % (_("SELinux Interface"), _("Context"))
+			print("%-30s %s\n" % (_("SELinux Interface"), _("Context")))
 		if is_mls_enabled:
 			for k in keys:
-				print "%-30s %s:%s:%s:%s " % (k,ddict[k][0], ddict[k][1],ddict[k][2], translate(ddict[k][3], False))
+				print("%-30s %s:%s:%s:%s " % (k,ddict[k][0], ddict[k][1],ddict[k][2], translate(ddict[k][3], False)))
 		else:
 			for k in keys:
-				print "%-30s %s:%s:%s " % (k,ddict[k][0], ddict[k][1],ddict[k][2])
+				print("%-30s %s:%s:%s " % (k,ddict[k][0], ddict[k][1],ddict[k][2]))
 			
 class fcontextRecords(semanageRecords):
 	def __init__(self, store = ""):
 		semanageRecords.__init__(self, store)
-                self.equiv = {}
-                self.equiv_dist = {}
-                self.equal_ind = False
-                try:
-                       fd = open(selinux.selinux_file_context_subs_path(), "r")
-                       for i in fd.readlines():
-                              target, substitute = i.split()
-                              self.equiv[target] = substitute
-                       fd.close()
-                except IOError:
-                       pass
-                try:
-                       fd = open(selinux.selinux_file_context_subs_dist_path(), "r")
-                       for i in fd.readlines():
-                              target, substitute = i.split()
-                              self.equiv_dist[target] = substitute
-                       fd.close()
-                except IOError:
-                       pass
-
-        def commit(self):
-                if self.equal_ind:
-                       subs_file = selinux.selinux_file_context_subs_path()
-                       tmpfile = "%s.tmp" % subs_file
-                       fd = open(tmpfile, "w")
-                       for target in self.equiv.keys():
-                              fd.write("%s %s\n" % (target, self.equiv[target]))
-                       fd.close()
-                       try:
-                              os.chmod(tmpfile, os.stat(subs_file)[stat.ST_MODE])
-                       except:
-                              pass
-                       os.rename(tmpfile,subs_file)
-                       self.equal_ind = False
+		self.equiv = {}
+		self.equiv_dist = {}
+		self.equal_ind = False
+		try:
+			fd = open(selinux.selinux_file_context_subs_path(), "r")
+			for i in fd.readlines():
+				target, substitute = i.split()
+				self.equiv[target] = substitute
+			fd.close()
+		except IOError:
+			pass
+		try:
+			fd = open(selinux.selinux_file_context_subs_dist_path(), "r")
+			for i in fd.readlines():
+				target, substitute = i.split()
+				self.equiv_dist[target] = substitute
+			fd.close()
+		except IOError:
+			pass
+
+	def commit(self):
+		if self.equal_ind:
+			subs_file = selinux.selinux_file_context_subs_path()
+			tmpfile = "%s.tmp" % subs_file
+			fd = open(tmpfile, "w")
+			for target in list(self.equiv.keys()):
+				fd.write("%s %s\n" % (target, self.equiv[target]))
+			fd.close()
+			try:
+				os.chmod(tmpfile, os.stat(subs_file)[stat.ST_MODE])
+			except:
+				pass
+			os.rename(tmpfile,subs_file)
+			self.equal_ind = False
 		semanageRecords.commit(self)
 
-        def add_equal(self, target, substitute):
-                self.begin()
-                if target in self.equiv.keys():
-                       raise ValueError(_("Equivalence class for %s already exists") % target)
-                self.validate(target)
+	def add_equal(self, target, substitute):
+		self.begin()
+		if target in list(self.equiv.keys()):
+			raise ValueError(_("Equivalence class for %s already exists") % target)
+		self.validate(target)
 
 		for fdict in (self.equiv, self.equiv_dist):
 			for i in fdict:
 				if i.startswith(target + "/"):
 					raise ValueError(_("File spec %s conflicts with equivalency rule '%s %s'") % (target, i, fdict[i]))
 
-                self.equiv[target] = substitute
-                self.equal_ind = True
-                self.commit()
-
-        def modify_equal(self, target, substitute):
-                self.begin()
-                if target not in self.equiv.keys():
-                       raise ValueError(_("Equivalence class for %s does not exists") % target)
-                self.equiv[target] = substitute
-                self.equal_ind = True
-                self.commit()
-
-        def createcon(self, target, seuser = "system_u"):
-                (rc, con) = semanage_context_create(self.sh)
-                if rc < 0:
-                       raise ValueError(_("Could not create context for %s") % target)
+		self.equiv[target] = substitute
+		self.equal_ind = True
+		self.commit()
+
+	def modify_equal(self, target, substitute):
+		self.begin()
+		if target not in list(self.equiv.keys()):
+			raise ValueError(_("Equivalence class for %s does not exists") % target)
+		self.equiv[target] = substitute
+		self.equal_ind = True
+		self.commit()
+
+	def createcon(self, target, seuser = "system_u"):
+		(rc, con) = semanage_context_create(self.sh)
+		if rc < 0:
+			raise ValueError(_("Could not create context for %s") % target)
 		if seuser == "":
 			seuser = "system_u"
 
-                rc = semanage_context_set_user(self.sh, con, seuser)
-                if rc < 0:
-                       raise ValueError(_("Could not set user in file context for %s") % target)
+		rc = semanage_context_set_user(self.sh, con, seuser)
+		if rc < 0:
+			raise ValueError(_("Could not set user in file context for %s") % target)
 		
-                rc = semanage_context_set_role(self.sh, con, "object_r")
-                if rc < 0:
-                       raise ValueError(_("Could not set role in file context for %s") % target)
+		rc = semanage_context_set_role(self.sh, con, "object_r")
+		if rc < 0:
+			raise ValueError(_("Could not set role in file context for %s") % target)
 
 		if is_mls_enabled == 1:
-                       rc = semanage_context_set_mls(self.sh, con, "s0")
-                       if rc < 0:
-                              raise ValueError(_("Could not set mls fields in file context for %s") % target)
-
-                return con
-
-        def validate(self, target):
-               if target == "" or target.find("\n") >= 0:
-                      raise ValueError(_("Invalid file specification"))
-               if target.find(" ") != -1:
-                      raise ValueError(_("File specification can not include spaces"))
-	       for fdict in (self.equiv, self.equiv_dist):
-		       for i in fdict:
-			       if target.startswith(i+"/"):
-				       t = re.sub(i, fdict[i], target)
-				       raise ValueError(_("File spec %s conflicts with equivalency rule '%s %s'; Try adding '%s' instead") % (target, i, fdict[i], t))
+			rc = semanage_context_set_mls(self.sh, con, "s0")
+			if rc < 0:
+				raise ValueError(_("Could not set mls fields in file context for %s") % target)
+
+		return con
+
+	def validate(self, target):
+		if target == "" or target.find("\n") >= 0:
+			raise ValueError(_("Invalid file specification"))
+		if target.find(" ") != -1:
+			raise ValueError(_("File specification can not include spaces"))
+		for fdict in (self.equiv, self.equiv_dist):
+			for i in fdict:
+				if target.startswith(i+"/"):
+					t = re.sub(i, fdict[i], target)
+					raise ValueError(_("File spec %s conflicts with equivalency rule '%s %s'; Try adding '%s' instead") % (target, i, fdict[i], t))
 
 
 	def __add(self, target, type, ftype = "", serange = "", seuser = "system_u"):
-                self.validate(target)
+		self.validate(target)
 
 		if is_mls_enabled == 1:
-                       serange = untranslate(serange)
+			serange = untranslate(serange)
 			
 		if type == "":
 			raise ValueError(_("SELinux Type is required"))
@@ -1631,32 +1626,32 @@
 			raise ValueError(_("Could not check if file context for %s is defined") % target)
 
 		if not exists:
-                       (rc, exists) = semanage_fcontext_exists_local(self.sh, k)
-                       if rc < 0:
-                              raise ValueError(_("Could not check if file context for %s is defined") % target)
+			(rc, exists) = semanage_fcontext_exists_local(self.sh, k)
+			if rc < 0:
+				raise ValueError(_("Could not check if file context for %s is defined") % target)
 
-                if exists:
-                       raise ValueError(_("File context for %s already defined") % target)
+		if exists:
+			raise ValueError(_("File context for %s already defined") % target)
 
 		(rc, fcontext) = semanage_fcontext_create(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not create file context for %s") % target)
 		
 		rc = semanage_fcontext_set_expr(self.sh, fcontext, target)
-                if type != "<<none>>":
-                       con = self.createcon(target, seuser)
+		if type != "<<none>>":
+			con = self.createcon(target, seuser)
 
-                       rc = semanage_context_set_type(self.sh, con, type)
-                       if rc < 0:
-                              raise ValueError(_("Could not set type in file context for %s") % target)
-
-                       if serange != "":
-                              rc = semanage_context_set_mls(self.sh, con, serange)
-                              if rc < 0:
-                                     raise ValueError(_("Could not set mls fields in file context for %s") % target)
-                       rc = semanage_fcontext_set_con(self.sh, fcontext, con)
-                       if rc < 0:
-                              raise ValueError(_("Could not set file context for %s") % target)
+			rc = semanage_context_set_type(self.sh, con, type)
+			if rc < 0:
+				raise ValueError(_("Could not set type in file context for %s") % target)
+
+			if serange != "":
+				rc = semanage_context_set_mls(self.sh, con, serange)
+				if rc < 0:
+					raise ValueError(_("Could not set mls fields in file context for %s") % target)
+			rc = semanage_fcontext_set_con(self.sh, fcontext, con)
+			if rc < 0:
+				raise ValueError(_("Could not set file context for %s") % target)
 
 		semanage_fcontext_set_type(fcontext, file_types[ftype])
 
@@ -1664,20 +1659,20 @@
 		if rc < 0:
 			raise ValueError(_("Could not add file context for %s") % target)
 
-                if type != "<<none>>":
-                       semanage_context_free(con)
+		if type != "<<none>>":
+			semanage_context_free(con)
 		semanage_fcontext_key_free(k)
 		semanage_fcontext_free(fcontext)
 
 	def add(self, target, type, ftype = "", serange = "", seuser = "system_u"):
-                self.begin()
-                self.__add(target, type, ftype, serange, seuser)
-                self.commit()
+		self.begin()
+		self.__add(target, type, ftype, serange, seuser)
+		self.commit()
 
 	def __modify(self, target, setype, ftype, serange, seuser):
 		if serange == "" and setype == "" and seuser == "":
 			raise ValueError(_("Requires setype, serange or seuser"))
-                self.validate(target)
+		self.validate(target)
 
 		(rc, k) = semanage_fcontext_key_create(self.sh, target, file_types[ftype])
 		if rc < 0:
@@ -1687,38 +1682,38 @@
 		if rc < 0:
 			raise ValueError(_("Could not check if file context for %s is defined") % target)
 		if not exists:
-                       (rc, exists) = semanage_fcontext_exists_local(self.sh, k)
-                       if not exists:
-                              raise ValueError(_("File context for %s is not defined") % target)
+			(rc, exists) = semanage_fcontext_exists_local(self.sh, k)
+			if not exists:
+				raise ValueError(_("File context for %s is not defined") % target)
 		
 		(rc, fcontext) = semanage_fcontext_query_local(self.sh, k)
 		if rc < 0:
-                       (rc, fcontext) = semanage_fcontext_query(self.sh, k)
-                       if rc < 0:
-                              raise ValueError(_("Could not query file context for %s") % target)
-
-                if setype != "<<none>>":
-                       con = semanage_fcontext_get_con(fcontext)
-			
-                       if con == None:
-                              con = self.createcon(target)
-                              
-                       if serange != "":
-                              semanage_context_set_mls(self.sh, con, untranslate(serange))
-                       if seuser != "":
-                              semanage_context_set_user(self.sh, con, seuser)
-                              
-                       if setype != "":
-                              semanage_context_set_type(self.sh, con, setype)
-
-                       rc = semanage_fcontext_set_con(self.sh, fcontext, con)
-                       if rc < 0:
-                              raise ValueError(_("Could not set file context for %s") % target)
-                else:
-                       rc = semanage_fcontext_set_con(self.sh, fcontext, None)
-                       if rc < 0:
-                              raise ValueError(_("Could not set file context for %s") % target)
-                       
+			(rc, fcontext) = semanage_fcontext_query(self.sh, k)
+			if rc < 0:
+				raise ValueError(_("Could not query file context for %s") % target)
+
+		if setype != "<<none>>":
+			con = semanage_fcontext_get_con(fcontext)
+			
+			if con == None:
+				con = self.createcon(target)
+				
+			if serange != "":
+				semanage_context_set_mls(self.sh, con, untranslate(serange))
+			if seuser != "":
+				semanage_context_set_user(self.sh, con, seuser)
+				
+			if setype != "":
+				semanage_context_set_type(self.sh, con, setype)
+
+			rc = semanage_fcontext_set_con(self.sh, fcontext, con)
+			if rc < 0:
+				raise ValueError(_("Could not set file context for %s") % target)
+		else:
+			rc = semanage_fcontext_set_con(self.sh, fcontext, None)
+			if rc < 0:
+				raise ValueError(_("Could not set file context for %s") % target)
+			
 		rc = semanage_fcontext_modify_local(self.sh, k, fcontext)
 		if rc < 0:
 			raise ValueError(_("Could not modify file context for %s") % target)
@@ -1727,39 +1722,39 @@
 		semanage_fcontext_free(fcontext)
 
 	def modify(self, target, setype, ftype, serange, seuser):
-                self.begin()
-                self.__modify(target, setype, ftype, serange, seuser)
-                self.commit()
+		self.begin()
+		self.__modify(target, setype, ftype, serange, seuser)
+		self.commit()
 
 	def deleteall(self):
 		(rc, flist) = semanage_fcontext_list_local(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list the file contexts"))
 
-                self.begin()
+		self.begin()
 
 		for fcontext in flist:
-                       target = semanage_fcontext_get_expr(fcontext)
-                       ftype = semanage_fcontext_get_type(fcontext)
-                       ftype_str = semanage_fcontext_get_type_str(ftype)
-                       (rc, k) = semanage_fcontext_key_create(self.sh, target, file_types[ftype_str])
-                       if rc < 0:
-                              raise ValueError(_("Could not create a key for %s") % target)
-
-                       rc = semanage_fcontext_del_local(self.sh, k)
-                       if rc < 0:
-                              raise ValueError(_("Could not delete the file context %s") % target)
-                       semanage_fcontext_key_free(k)
+			target = semanage_fcontext_get_expr(fcontext)
+			ftype = semanage_fcontext_get_type(fcontext)
+			ftype_str = semanage_fcontext_get_type_str(ftype)
+			(rc, k) = semanage_fcontext_key_create(self.sh, target, file_types[ftype_str])
+			if rc < 0:
+				raise ValueError(_("Could not create a key for %s") % target)
+
+			rc = semanage_fcontext_del_local(self.sh, k)
+			if rc < 0:
+				raise ValueError(_("Could not delete the file context %s") % target)
+			semanage_fcontext_key_free(k)
 	
-                self.equiv = {}
-                self.equal_ind = True
-                self.commit()
+		self.equiv = {}
+		self.equal_ind = True
+		self.commit()
 
 	def __delete(self, target, ftype):
-                if target in self.equiv.keys():
-                       self.equiv.pop(target)
-                       self.equal_ind = True
-                       return
+		if target in list(self.equiv.keys()):
+			self.equiv.pop(target)
+			self.equal_ind = True
+			return
 
 		(rc,k) = semanage_fcontext_key_create(self.sh, target, file_types[ftype])
 		if rc < 0:
@@ -1784,86 +1779,86 @@
 		semanage_fcontext_key_free(k)		
 
 	def delete(self, target, ftype):
-                self.begin()
-                self.__delete( target, ftype)
-                self.commit()
+		self.begin()
+		self.__delete( target, ftype)
+		self.commit()
 
 	def get_all(self, locallist = 0):
-                if locallist:
-                       (rc, self.flist) = semanage_fcontext_list_local(self.sh)
-                else:
-                       (rc, self.flist) = semanage_fcontext_list(self.sh)
-                       if rc < 0:
-                              raise ValueError(_("Could not list file contexts"))
-
-                       (rc, fclocal) = semanage_fcontext_list_local(self.sh)
-                       if rc < 0:
-                              raise ValueError(_("Could not list local file contexts"))
+		if locallist:
+			(rc, self.flist) = semanage_fcontext_list_local(self.sh)
+		else:
+			(rc, self.flist) = semanage_fcontext_list(self.sh)
+			if rc < 0:
+				raise ValueError(_("Could not list file contexts"))
+
+			(rc, fclocal) = semanage_fcontext_list_local(self.sh)
+			if rc < 0:
+				raise ValueError(_("Could not list local file contexts"))
 
-                       self.flist += fclocal
+			self.flist += fclocal
 
-                ddict = {}
+		ddict = {}
 		for fcontext in self.flist:
 			expr = semanage_fcontext_get_expr(fcontext)
 			ftype = semanage_fcontext_get_type(fcontext)
 			ftype_str = semanage_fcontext_get_type_str(ftype)
 			con = semanage_fcontext_get_con(fcontext)
 			if con:
-                               ddict[(expr, ftype_str)] = (semanage_context_get_user(con), semanage_context_get_role(con), semanage_context_get_type(con), semanage_context_get_mls(con))
+				ddict[(expr, ftype_str)] = (semanage_context_get_user(con), semanage_context_get_role(con), semanage_context_get_type(con), semanage_context_get_mls(con))
 			else:
 				ddict[(expr, ftype_str)] = con
 
 		return ddict
 			
-        def customized(self):
-               l = []
-               fcon_dict = self.get_all(True)
-               keys = fcon_dict.keys()
-               keys.sort()
-               for k in keys:
-                      if fcon_dict[k]:
-                             l.append("-a -f '%s' -t %s '%s'" % (k[1], fcon_dict[k][2], k[0]))
-               return l
+	def customized(self):
+		l = []
+		fcon_dict = self.get_all(True)
+		keys = list(fcon_dict.keys())
+		keys.sort()
+		for k in keys:
+			if fcon_dict[k]:
+				l.append("-a -f '%s' -t %s '%s'" % (k[1], fcon_dict[k][2], k[0]))
+		return l
 
 	def list(self, heading = 1, locallist = 0 ):
 		fcon_dict = self.get_all(locallist)
-                keys = fcon_dict.keys()
+		keys = list(fcon_dict.keys())
 		if len(keys) != 0:
 			keys.sort()
 			if heading:
-				print "%-50s %-18s %s\n" % (_("SELinux fcontext"), _("type"), _("Context"))
+				print("%-50s %-18s %s\n" % (_("SELinux fcontext"), _("type"), _("Context")))
 			for k in keys:
 				if fcon_dict[k]:
 					if is_mls_enabled:
-						print "%-50s %-18s %s:%s:%s:%s " % (k[0], k[1], fcon_dict[k][0], fcon_dict[k][1], fcon_dict[k][2], translate(fcon_dict[k][3],False))
+						print("%-50s %-18s %s:%s:%s:%s " % (k[0], k[1], fcon_dict[k][0], fcon_dict[k][1], fcon_dict[k][2], translate(fcon_dict[k][3],False)))
 					else:
-						print "%-50s %-18s %s:%s:%s " % (k[0], k[1], fcon_dict[k][0], fcon_dict[k][1],fcon_dict[k][2])
+						print("%-50s %-18s %s:%s:%s " % (k[0], k[1], fcon_dict[k][0], fcon_dict[k][1],fcon_dict[k][2]))
 				else:
-					print "%-50s %-18s <<None>>" % (k[0], k[1])
+					print("%-50s %-18s <<None>>" % (k[0], k[1]))
 
 		if len(self.equiv_dist):
-		       if not locallist:
-			       if heading:
-				       print _("\nSELinux Distribution fcontext Equivalence \n")
-			       for target in self.equiv_dist.keys():
-				       print "%s = %s" % (target, self.equiv_dist[target])
+			if not locallist:
+				if heading:
+					print(_("\nSELinux Distribution fcontext Equivalence \n"))
+				for target in list(self.equiv_dist.keys()):
+					print("%s = %s" % (target, self.equiv_dist[target]))
 		if len(self.equiv):
-                       if heading:
-                              print _("\nSELinux Local fcontext Equivalence \n")
+			if heading:
+				print(_("\nSELinux Local fcontext Equivalence \n"))
 
-                       for target in self.equiv.keys():
-                              print "%s = %s" % (target, self.equiv[target])
+			for target in list(self.equiv.keys()):
+				print("%s = %s" % (target, self.equiv[target]))
 				
 class booleanRecords(semanageRecords):
 	def __init__(self, store = ""):
 		semanageRecords.__init__(self, store)
-                self.dict = {}
-                self.dict["TRUE"] = 1
-                self.dict["FALSE"] = 0
-                self.dict["ON"] = 1
-                self.dict["OFF"] = 0
-                self.dict["1"] = 1
-                self.dict["0"] = 0
+		self.dict = {}
+		self.dict["TRUE"] = 1
+		self.dict["FALSE"] = 0
+		self.dict["ON"] = 1
+		self.dict["OFF"] = 0
+		self.dict["1"] = 1
+		self.dict["0"] = 0
 
 		try:
 			rc, self.current_booleans = selinux.security_get_boolean_names()
@@ -1878,61 +1873,61 @@
 			self.modify_local = False
 
 	def __mod(self, name, value):
-                (rc, k) = semanage_bool_key_create(self.sh, name)
-                if rc < 0:
-                       raise ValueError(_("Could not create a key for %s") % name)
-                (rc, exists) = semanage_bool_exists(self.sh, k)
-                if rc < 0:
-                       raise ValueError(_("Could not check if boolean %s is defined") % name)
-                if not exists:
-                       raise ValueError(_("Boolean %s is not defined") % name)	
-                
-                (rc, b) = semanage_bool_query(self.sh, k)
-                if rc < 0:
-                       raise ValueError(_("Could not query file context %s") % name)
-
-                if value.upper() in self.dict:
-                       semanage_bool_set_value(b, self.dict[value.upper()])
-                else:
-                       raise ValueError(_("You must specify one of the following values: %s") % ", ".join(self.dict.keys()) )
-                
+		(rc, k) = semanage_bool_key_create(self.sh, name)
+		if rc < 0:
+			raise ValueError(_("Could not create a key for %s") % name)
+		(rc, exists) = semanage_bool_exists(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not check if boolean %s is defined") % name)
+		if not exists:
+			raise ValueError(_("Boolean %s is not defined") % name)	
+		
+		(rc, b) = semanage_bool_query(self.sh, k)
+		if rc < 0:
+			raise ValueError(_("Could not query file context %s") % name)
+
+		if value.upper() in self.dict:
+			semanage_bool_set_value(b, self.dict[value.upper()])
+		else:
+			raise ValueError(_("You must specify one of the following values: %s") % ", ".join(list(self.dict.keys())) )
+		
 		if self.modify_local and name in self.current_booleans:
 			rc = semanage_bool_set_active(self.sh, k, b)
 			if rc < 0:
 				raise ValueError(_("Could not set active value of boolean %s") % name)
-                rc = semanage_bool_modify_local(self.sh, k, b)
-                if rc < 0:
-                       raise ValueError(_("Could not modify boolean %s") % name)
+		rc = semanage_bool_modify_local(self.sh, k, b)
+		if rc < 0:
+			raise ValueError(_("Could not modify boolean %s") % name)
 		semanage_bool_key_free(k)
 		semanage_bool_free(b)
 
 	def modify(self, name, value = None, use_file = False):
-                
-                self.begin()
+		
+		self.begin()
 
-                if use_file:
-                       fd = open(name)
-                       for b in fd.read().split("\n"):
-                              b = b.strip()
-                              if len(b) == 0:
-                                     continue
-
-                              try:
-                                     boolname, val = b.split("=")
-                              except ValueError:
-                                     raise ValueError(_("Bad format %s: Record %s" % ( name, b) ))
-                              self.__mod(boolname.strip(), val.strip())
-                       fd.close()
-                else:
-                       self.__mod(name, value)
+		if use_file:
+			fd = open(name)
+			for b in fd.read().split("\n"):
+				b = b.strip()
+				if len(b) == 0:
+					continue
+
+				try:
+					boolname, val = b.split("=")
+				except ValueError:
+					raise ValueError(_("Bad format %s: Record %s" % ( name, b) ))
+				self.__mod(boolname.strip(), val.strip())
+			fd.close()
+		else:
+			self.__mod(name, value)
 
-                self.commit()
+		self.commit()
 		
 	def __delete(self, name):
 
-                (rc, k) = semanage_bool_key_create(self.sh, name)
-                if rc < 0:
-                      raise ValueError(_("Could not create a key for %s") % name)
+		(rc, k) = semanage_bool_key_create(self.sh, name)
+		if rc < 0:
+			raise ValueError(_("Could not create a key for %s") % name)
 		(rc, exists) = semanage_bool_exists(self.sh, k)
 		if rc < 0:
 			raise ValueError(_("Could not check if boolean %s is defined") % name)
@@ -1952,81 +1947,81 @@
 		semanage_bool_key_free(k)
 
 	def delete(self, name):
-                self.begin()
-                self.__delete(name)
-                self.commit()
+		self.begin()
+		self.__delete(name)
+		self.commit()
 
 	def deleteall(self):
 		(rc, self.blist) = semanage_bool_list_local(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list booleans"))
 
-                self.begin()
+		self.begin()
 
 		for boolean in self.blist:
-                       name = semanage_bool_get_name(boolean)
-                       self.__delete(name)
+			name = semanage_bool_get_name(boolean)
+			self.__delete(name)
 
-                self.commit()
+		self.commit()
 	
 	def get_all(self, locallist = 0):
 		ddict = {}
-                if locallist:
-                       (rc, self.blist) = semanage_bool_list_local(self.sh)
-                else:
-                       (rc, self.blist) = semanage_bool_list(self.sh)
+		if locallist:
+			(rc, self.blist) = semanage_bool_list_local(self.sh)
+		else:
+			(rc, self.blist) = semanage_bool_list(self.sh)
 		if rc < 0:
 			raise ValueError(_("Could not list booleans"))
 
 		for boolean in self.blist:
-                       value = []
-                       name = semanage_bool_get_name(boolean)
-                       value.append(semanage_bool_get_value(boolean))
-		       if self.modify_local and boolean in self.current_booleans:
-			       value.append(selinux.security_get_boolean_pending(name))
-			       value.append(selinux.security_get_boolean_active(name))
-		       else:
-			       value.append(value[0])
-			       value.append(value[0])
-                       ddict[name] = value
+			value = []
+			name = semanage_bool_get_name(boolean)
+			value.append(semanage_bool_get_value(boolean))
+			if self.modify_local and boolean in self.current_booleans:
+				value.append(selinux.security_get_boolean_pending(name))
+				value.append(selinux.security_get_boolean_active(name))
+			else:
+				value.append(value[0])
+				value.append(value[0])
+			ddict[name] = value
 
 		return ddict
 			
-        def get_desc(self, boolean):
-               return boolean_desc(boolean)
+	def get_desc(self, boolean):
+		return boolean_desc(boolean)
+
+	def get_category(self, boolean):
+		if boolean in booleans_dict:
+			return _(booleans_dict[boolean][0])
+		else:
+			return _("unknown")
 
-        def get_category(self, boolean):
-               if boolean in booleans_dict:
-                      return _(booleans_dict[boolean][0])
-               else:
-                      return _("unknown")
-
-        def customized(self):
-               l = []
-               ddict = self.get_all(True)
-               keys = ddict.keys()
-               keys.sort()
-               for k in keys:
-                      if ddict[k]:
-                             l.append("-%s %s" %  (ddict[k][2], k))
-               return l
+	def customized(self):
+		l = []
+		ddict = self.get_all(True)
+		keys = list(ddict.keys())
+		keys.sort()
+		for k in keys:
+			if ddict[k]:
+				l.append("-%s %s" %  (ddict[k][2], k))
+		return l
 
 	def list(self, heading = True, locallist = False, use_file = False):
-                on_off = (_("off"), _("on")) 
+		on_off = (_("off"), _("on")) 
 		if use_file:
-                       ddict = self.get_all(locallist)
-                       keys = ddict.keys()
-                       for k in keys:
-                              if ddict[k]:
-                                     print "%s=%s" %  (k, ddict[k][2])
-                       return
+			ddict = self.get_all(locallist)
+			keys = list(ddict.keys())
+			for k in keys:
+				if ddict[k]:
+					print("%s=%s" %  (k, ddict[k][2]))
+			return
 		ddict = self.get_all(locallist)
-		keys = ddict.keys()
+		keys = list(ddict.keys())
 		if len(keys) == 0:
 			return 
 
 		if heading:
-			print "%-30s %s  %s %s\n" % (_("SELinux boolean"),_("State"), _("Default"), _("Description"))
+			print("%-30s %s  %s %s\n" % (_("SELinux boolean"),_("State"), _("Default"), _("Description")))
 		for k in keys:
 			if ddict[k]:
-				print "%-30s (%-5s,%5s)  %s" %  (k, on_off[selinux.security_get_boolean_active(k)], on_off[ddict[k][2]], self.get_desc(k))
+				print("%-30s (%-5s,%5s)  %s" %  (k, on_off[selinux.security_get_boolean_active(k)], on_off[ddict[k][2]], self.get_desc(k)))
